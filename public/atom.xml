<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>jeff-mitchell.dev</title>
    <subtitle>A blog mostly about Rust...mostly...</subtitle>
    <link rel="self" type="application/atom+xml" href="https://jeff-mitchell.dev/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-10-16T00:00:00+00:00</updated>
    <id>https://jeff-mitchell.dev/atom.xml</id>
    <entry xml:lang="en">
        <title>This Week in Rust</title>
        <published>2024-10-16T00:00:00+00:00</published>
        <updated>2024-10-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-10-15-this-week-in-rust/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-10-15-this-week-in-rust/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-10-15-this-week-in-rust/">&lt;p&gt;Hello everyone, I&#x27;m back in businesss with this blog. Following up on my &amp;quot;technical difficulties&amp;quot; post, turns out it was a skill issue that knocked me offline.&lt;&#x2F;p&gt;
&lt;p&gt;The moral of the story is, learn properly when, where, and why to sanitize the paths of incoming requests. Don&#x27;t implement things just because you think you need to.&lt;&#x2F;p&gt;
&lt;p&gt;Here is a link to last week&#x27;s &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;this-week-in-rust.org&#x2F;blog&#x2F;2024&#x2F;10&#x2F;09&#x2F;this-week-in-rust-568&#x2F;&quot;&gt;TWIR issue&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Lot&#x27;s of good things in there.&lt;&#x2F;p&gt;
&lt;p&gt;My own week in Rust was not productive, as it was consumed with figuring out why I knocked this blog offline. I have moved it to the new Shuttle platform, which entered public preview last week. Here is there announcement: &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.shuttle.dev&#x2F;blog&#x2F;2024&#x2F;10&#x2F;10&#x2F;shuttle-redefining-backend-development&quot;&gt;New Platform Announcement&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In terms of what I&#x27;m learning, I&#x27;m taking a break from any language at the moment. I&#x27;m doing Jayson Lennon&#x27;s Vim course on Zero to Mastery. It&#x27;s slow going, as I&#x27;m focused on the basics to start building muscle memory. I can see the benefit of not taking my hands of the keyboard.&lt;&#x2F;p&gt;
&lt;p&gt;If I step back and objectively look, despite my innate negativity, I&#x27;ve made a lot of progress in the past year. I&#x27;m likely going to take the rest of the year off, learning wise, and double down on properly learning Zola. I&#x27;m using a pre-made theme, which is not supported any longer by its author. I&#x27;d like to update it and make it my own. There are few true resources for learning Zola and I&#x27;d like to create something of quality to help others.&lt;&#x2F;p&gt;
&lt;p&gt;Stay tuned!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Technical Difficulties</title>
        <published>2024-10-15T00:00:00+00:00</published>
        <updated>2024-10-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-10-15-technical-difficulties/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-10-15-technical-difficulties/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-10-15-technical-difficulties/">&lt;p&gt;I&#x27;m currently experiencing some technical difficulties with this blog site. For some reason, if you don&#x27;t append &amp;quot;index.html&amp;quot; to the end of all routes, your browser will display an error page with &amp;quot;too many redirects&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll be exploring this further in the coming days, mostly to learn, but am also working behind the scenes on an alternate blog which will be hosted on Netlify. That is a few weeks...no wait, let&#x27;s not be overly optimistic...months away though and am targeting the beginning of next year to make it go live.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Yew: First Steps</title>
        <published>2024-10-05T00:00:00+00:00</published>
        <updated>2024-10-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-10-05-getting-started-with-yew/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-10-05-getting-started-with-yew/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-10-05-getting-started-with-yew/">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h1&gt;
&lt;p&gt;What if I said there was a different way to build for the web?&lt;&#x2F;p&gt;
&lt;p&gt;There is, it&#x27;s called &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;webassembly.org&#x2F;&quot;&gt;WebAssembly&lt;&#x2F;a&gt;. The Rust programming language, of which this author is so fond, can target WebAssembly. This means you can leverage Rust&#x27;s type system and inherent memory safety to build for the web.&lt;&#x2F;p&gt;
&lt;p&gt;WebAssembly is supported by all major browsers and is a completely viable way to build a web application. Two things are holding it back, a) the hegemony of the JavaScript libraries and frameworks, and b) the perceived difficulty of learning Rust. Frankly I&#x27;m not sure Rust front end web dev will truly ever be a thing, but for those of us that want to, it can be a happy and productive thing today. The main attraction, IMHO, is that you&#x27;re not cobbling together 600 tools like you have to in the JavaScript world.&lt;&#x2F;p&gt;
&lt;p&gt;As soon as I found out Rust could be a viable choice for front end development, I said &amp;quot;I&#x27;m in&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take a closer look.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;enter-yew&quot;&gt;Enter Yew&lt;&#x2F;h2&gt;
&lt;p&gt;There are several up and coming front end frameworks that are worth looking at. The oldest, and probably most stable (don&#x27;t let the 0.21 version number fool you) is &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;yew.rs&quot;&gt;Yew&lt;&#x2F;a&gt;. This is the one I started on and the one I&#x27;ve been focusing on the most. I enjoy it a lot, it&#x27;s very React like and retains the familiar notion of composing a web application out of re-usable components. It has state, hooks, a router, and is pretty much ready to go for whatever you want to do.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;em&gt;Install Rust&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There is some setup to get off the ground. First thing, if you haven&#x27;t already, is install Rust. The official instructions are &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;tools&#x2F;install&quot;&gt;here&lt;&#x2F;a&gt;. The minimum supported Rust version for Yew is 1.76.0. Older versions will not compile. If you have Rust installed already and just need to update your toolchain, do: &lt;code&gt;rustup update&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Install WebAssembly Target&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The compilation target for browser-based WebAssembly is called &lt;code&gt;wasm32-unknown-unknown&lt;&#x2F;code&gt;. Yes, I know it sounds wierd. The unknown-unknown thing bugged me for a long while, but I&#x27;m over that now. Install it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rustup&lt;&#x2F;span&gt;&lt;span&gt; target add wasm32-unknown-unknown
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;Install Trunk&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The easiest build tool for managing and deploying your WebAssembly creations is called &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;trunkrs.dev&quot;&gt;trunk&lt;&#x2F;a&gt;. It&#x27;s really nice, and very straightforward to use. Install it via cargo:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --locked&lt;&#x2F;span&gt;&lt;span&gt; trunk
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Alright, setup is done. Let&#x27;s get on with a proverbial &amp;quot;Hello, World!&amp;quot;, but with a Yew flavour.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;create-the-project&quot;&gt;Create the Project&lt;&#x2F;h3&gt;
&lt;p&gt;First thing is to navigate to wherever you save your development projects. Once there, do:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; new hello-yew-app
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; hello-yew-app
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will start a new Rust project and change you into the freshly created directory that holds it. Replace the contents of the &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; file with this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[package]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello-yew-app&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;edition &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2021&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[dependencies]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;yew &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.21&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;csr&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This adds the latest stable version of Yew, hosted on &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;crates.io&quot;&gt;crates.io&lt;&#x2F;a&gt;, as a dependency to your project. It adds the &amp;quot;csr&amp;quot; feature, which enables client side rendering, meaning the application you create is rendered in the target browser. Yew does have server side rendering capability, but it&#x27;s on the experimental side at the moment. For now, the end result will be a single page application, exactly the same as you&#x27;d build with a JavaScript library or framework.&lt;&#x2F;p&gt;
&lt;p&gt;Now, go into &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt;, delete the boilerplate that&#x27;s there and swap out with this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; src&#x2F;main.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; dependencies
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;yew::{function_component, html};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; the root app component, it&amp;#39;s annotated with Yew&amp;#39;s function_component macro, which marks it as a 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; function component. This function has no parameters and returns Yew&amp;#39;s Html type. We use Yew&amp;#39;s html! 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; macro to build and return a simple piece of text marked up with HTML.
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;function_component&lt;&#x2F;span&gt;&lt;span&gt;(App)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Html {
&lt;&#x2F;span&gt;&lt;span&gt;  html! {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;h1&amp;gt;{ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello, World!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; }&amp;lt;&#x2F;h1&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; main function, mounts the app component and renders it
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  yew::Renderer::&amp;lt;App&amp;gt;::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The very last piece we need is an html file to target. Create &lt;code&gt;index.html&lt;&#x2F;code&gt; at the root of your project and add:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DOCTYPE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;en&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;charset&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;UTF-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;viewport&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;width=device-width, initial-scale=1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Hello Yew&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Trunk will use this &lt;code&gt;index.html&lt;&#x2F;code&gt; to build out the assets for deployment. That&#x27;s pretty much all that&#x27;s need to get started.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;moment-of-truth&quot;&gt;Moment of Truth&lt;&#x2F;h2&gt;
&lt;p&gt;To see all the fine fruits of your labours, back at your command prompt, type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trunk&lt;&#x2F;span&gt;&lt;span&gt; serve
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will start up trunk&#x27;s hot reloading development server. Now, open your default browser to display your handiwork. You should be greeted with a very boring &amp;quot;Hello, World&amp;quot; message in the main window of your browser. On the one hand yes, it&#x27;s boring. On the other, take a step back and think about what you just did.&lt;&#x2F;p&gt;
&lt;p&gt;You built a web site...with Rust. Yes, there&#x27;s HTML there, because you have to have that, but otherwise, it&#x27;s all done in Rust, compiled to WebAssembly and run by your browser. There is just the tinest bit of JavaScript in there because it&#x27;s needed to load the WebAssembly file that Rust built.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;This is a quick taste, to get you off the ground. There are a lot of details here that I&#x27;ve glossed over, in an effort to introduce the notion of web dev with Rust. In the future, I&#x27;ll circle back on some of the inner workings. Also in a future article, I&#x27;ll dive more into how to flesh out this simple site with assets and styles to begin to make it more interesting.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks for reading!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;yew.rs&#x2F;docs&#x2F;tutorial&quot;&gt;Yew Tutorial&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>This Week in Rust</title>
        <published>2024-10-04T00:00:00+00:00</published>
        <updated>2024-10-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-10-04-this-week-in-rust/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-10-04-this-week-in-rust/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-10-04-this-week-in-rust/">&lt;p&gt;Falling back on old habits again, that being late with my link to &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;this-week-in-rust.org&#x2F;blog&#x2F;2024&#x2F;10&#x2F;02&#x2F;this-week-in-rust-567&#x2F;&quot;&gt;This Week in Rust&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m off for a couple of weeks, with an eye to re-inventing myself just a little bit. I&#x27;m constantly feeling annoyed&#x2F;disappointed&#x2F;frustrated with who I am as person. Must be my own version of a mid-life crisis. Anyhow, I will not bore you with anything about this right now.&lt;&#x2F;p&gt;
&lt;p&gt;I started exploring &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;leptos.dev&quot;&gt;Leptos&lt;&#x2F;a&gt; a little this week, via a re-do of my &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;nasa-imagery-viewer-v2-xggw.shuttle.app&quot;&gt;NASA Imagery Viewer&lt;&#x2F;a&gt;. Overall, Leptos is not that much different from Yew. Reactivity and the notion of signals are a lot to digest...and I&#x27;m still digesting. I can also see I&#x27;m going to have to seriously brush up on closures and how to use them. Much of what you need in Leptos around reactivity is done with closures.&lt;&#x2F;p&gt;
&lt;p&gt;I will keep Yew in the toolbelt, but to be frank, I feel it&#x27;s going to die. There seems to be zero activity around it and zero effort to move the framework forward, which I guess doesn&#x27;t matter, as it works in it&#x27;s current state. Leptos seems to have a lot of momentum behind it and the documentation is far better than that for Yew.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s no harm in knowing both.&lt;&#x2F;p&gt;
&lt;p&gt;Also, this is sacrilege, but I &lt;em&gt;may&lt;&#x2F;em&gt; return to dabbling in JavaScript and continue learning React. I know, I know, utter heresy from a self-professed Rust shill. Here&#x27;s the thing. I was admonished months ago by the internet to level up and be less language centric. After all, languages are secondary and the real superpower is problem solving and picking the right tool for the job. Also, in this modern age, knowing JavaScript is unfortunately a must. All this stuff I&#x27;m doing with WebAssembly on the front end is loaded into the browser by, you guessed it, JavaScript.&lt;&#x2F;p&gt;
&lt;p&gt;I do want to level up and be less Rust centric.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s going to take a long time though.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s all for this week. Hope your own Rust adventures are going well.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>This Week in Rust</title>
        <published>2024-09-25T00:00:00+00:00</published>
        <updated>2024-09-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-09-25-this-week-in-rust/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-09-25-this-week-in-rust/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-09-25-this-week-in-rust/">&lt;p&gt;What do you know? I&#x27;m on time with &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;this-week-in-rust.org&#x2F;blog&#x2F;2024&#x2F;09&#x2F;25&#x2F;this-week-in-rust-566&#x2F;&quot;&gt;This Week in Rust&lt;&#x2F;a&gt;. For some reason I waited to see it appear in my daily.dev feed, but today I thought, don&#x27;t need to do that!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;deno.com&#x2F;blog&#x2F;rusty-v8-stabilized&quot;&gt;Announcing Stable V8 Bindings for Rust&lt;&#x2F;a&gt; was the story that caught my eye this week. Gonna explore this some more. I dislike JavaScript, but somehow using it from within the context of Rust intrigues me. JavaScript is unfortunately a necessary evil in today&#x27;s world. I&#x27;ve always had difficulty learning it because it lacks the structure I&#x27;m used to from programming languages I learned in the past.&lt;&#x2F;p&gt;
&lt;p&gt;My own Rust adventure this week saw me complete the back end and front end for a Code Knowledge Base search tool for my office. Last night, with a bit of debugging help from ChatGPT, I implemented keyword search. This morning I took that code and filled in the tests and API endpoint for the companion code reference search. I made the tool live on the staging version of my office intranet site project, which is written in WebAsssembly via Yew. The build assets are deployed onto IIS where staff access the page via their browser of choice.&lt;&#x2F;p&gt;
&lt;p&gt;A bit of background about this project...&lt;&#x2F;p&gt;
&lt;p&gt;We have weekly stand up meetings on Tuesdays, and frequently staff will ask questions Building Code related questions which we as a group attempt help answer. As you can imagine, this can be come somewhat of a rabbit hole a lot of times, but it&#x27;s a good way to hear opinions and perspectives on whatever the question is. I&#x27;ve been wanting for months (years) to develop a knowledge base of this material, which could be supplemented with external information and opinions. This week, finally, I&#x27;m proud to say that something very workable and useful has finally come together...in full stack Rust.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve more than likely crated a raft of future me problems that I&#x27;ll have to deal with at some point, but in the moment, it works and I&#x27;m proud of myself.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m going to push the search tool to the production site tomorrow, then finish fleshing out the backend admin panel of the API, which eases managing of new and existing information.&lt;&#x2F;p&gt;
&lt;p&gt;Overall, this project has really put me over the top with development using the Yew framework. I&#x27;m going to begin writing up a series of things about it, mostly so I have a place to refer back to. If it helps someone else, that&#x27;s icing on the cake.&lt;&#x2F;p&gt;
&lt;p&gt;Fun times.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>This Week in Rust</title>
        <published>2024-09-20T00:00:00+00:00</published>
        <updated>2024-09-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-09-20-this-week-in-rust/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-09-20-this-week-in-rust/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-09-20-this-week-in-rust/">&lt;p&gt;I&#x27;m two days late with my link to &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;this-week-in-rust.org&#x2F;blog&#x2F;2024&#x2F;09&#x2F;18&#x2F;this-week-in-rust-565&#x2F;&quot;&gt;This Week in Rust&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In my own week in Rust, I decided to stop the random drifting between useless personal projects that never go anywhere and instead focus on a work related project. I&#x27;ve built out an office intranet site with Yew. I had a knowledge breakthrough with form handling and events, which allowed me to bring the Yew site up to par functionally with the React version I&#x27;d previously built.&lt;&#x2F;p&gt;
&lt;p&gt;I also resumed work on the Actix Web backend for a Code interpretations knowledge base for my staff to use. I&#x27;m creating a searchable knowledge base of our internal building code related decisions and discussions. This week I managed to get it live to the point of being usable. Progress! Tasks for next week are to add update and delete functionality to the web form template I started for creating new entries.&lt;&#x2F;p&gt;
&lt;p&gt;This weekend I want to write something on generics and &lt;em&gt;may&lt;&#x2F;em&gt; start to look at Diesel. Thus far in my Rust journey I&#x27;ve focused on using raw SQLx, but in discussing with others I can see maybe there&#x27;s benefit in knowing one ORM.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m also going to start a series of pieces on Yew. I want to create a resource mostly for myself that I can look at to refresh on how to do things. The Yew docs are a hair weak in that regard. They assume you know what you&#x27;re doing and have web dev experience, which I didn&#x27;t have nearly as much as I should.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s it! Hope you are all making progress in your own Rust journey...or whatever language you&#x27;ve chosen to focus on.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Serving the Web with Rocket</title>
        <published>2024-09-15T00:00:00+00:00</published>
        <updated>2024-09-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-09-15-serving-the-web-with-rocket/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-09-15-serving-the-web-with-rocket/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-09-15-serving-the-web-with-rocket/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;I want to challenge the notion that it&#x27;s difficult to do things with Rust. Yes, you have to learn the language, and yes, the learning curve is steep. However, I maintain that you don&#x27;t have to be all the way up the learning curve to be productive.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to &amp;quot;batteries included&amp;quot; web frameworks like &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;rocket.rs&quot;&gt;Rocket&lt;&#x2F;a&gt; it&#x27;s quick to get started. In 30 minutes, at worst an hour, you can have a minimal web server together which let&#x27;s you do server side rendering with templates. The served templates can be styled with CSS and livened with JavaScript, all with plain &#x27;ol vanilla web tech.&lt;&#x2F;p&gt;
&lt;p&gt;Even better, you can host on &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;shuttle.rs&quot;&gt;Shuttle&#x27;s&lt;&#x2F;a&gt; Rust native development platform, which takes the heavy lifting away so you can focus on what you actually want to make.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s get this Rocket to the Vehicle Assembly Building.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;&#x2F;h2&gt;
&lt;p&gt;Head to where ever you save your coding projects on our own computer. First thing to do is install Shuttle. You can get the latest build for your operating system by following the &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.shuttle.rs&#x2F;getting-started&#x2F;installation&quot;&gt;instructions&lt;&#x2F;a&gt; on the Shuttle website.&lt;&#x2F;p&gt;
&lt;p&gt;At a command prompt, type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; shuttle init
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Follow the prompts by entering a project name, choosing the location, and picking a starting framework. Those steps will look like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jeff-mitchell.dev&#x2F;blog&#x2F;2024&#x2F;2024-09-15-serving-the-web-with-rocket&#x2F;rocket-shuttle-init.png&quot; alt=&quot;rocket shuttle init&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m using the new beta Shuttle platform, but the steps are basically the same regardless. This will give you some basic boilerplate on which to build further.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;adding-a-health-check-route&quot;&gt;Adding a Health Check Route&lt;&#x2F;h2&gt;
&lt;p&gt;Open your favourite code editor, and modify the code in &lt;code&gt;main.rs&lt;&#x2F;code&gt; to look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; src&#x2F;main.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; dependencies
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rocket::{get, routes, Build, Rocket};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rocket::http::Status;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; function which returns a 200 OK response with empty body
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;health&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;health&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Status {
&lt;&#x2F;span&gt;&lt;span&gt;    Status::Ok
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; function to create a rocket instance
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Rocket&amp;lt;Build&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    rocket::build()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;mount&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, routes![health])
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; main function
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shuttle_runtime&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; shuttle_rocket::ShuttleRocket {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; rocket = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(rocket.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code gives you a minimum Rocket server with one route at &lt;code&gt;&#x2F;api&#x2F;health&lt;&#x2F;code&gt;. This route has a handler function which responds with a 200 OK and empty body. This is a &amp;quot;health check&amp;quot; route that you can use in a basic way to poll if your server is running.&lt;&#x2F;p&gt;
&lt;p&gt;One aside to point out here, we have the routes created with a separate function called &lt;code&gt;create()&lt;&#x2F;code&gt; which takes no arguments and returns a Rocket instance configured with routes. We then call this &lt;code&gt;create()&lt;&#x2F;code&gt; function from our &lt;code&gt;main()&lt;&#x2F;code&gt; function. Separation like this facilitates testing, which I&#x27;ll get into in the future.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;serving-static-files&quot;&gt;Serving Static Files&lt;&#x2F;h2&gt;
&lt;p&gt;A web server needs to make assets available when routes are hit. With Rocket, an entire website can be served from the &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; index route by modifying our &lt;code&gt;main.rs&lt;&#x2F;code&gt; like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; src&#x2F;main.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; dependencies
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rocket::{get, routes, Build, Rocket};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rocket::fs::{relative, FileServer};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rocket::http::Status;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rocket_dyn_templates::{context, Template};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; function which returns a 200 OK response with empty body
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;health&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;health&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Status {
&lt;&#x2F;span&gt;&lt;span&gt;    Status::Ok
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; function which returns the index page template
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Template {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; message = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello, World!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    Template::render(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, context! { message })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; function to create a rocket instance
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Rocket&amp;lt;Build&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    rocket::build()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;attach&lt;&#x2F;span&gt;&lt;span&gt;(Template::fairing())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;mount&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, routes![index])
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;mount&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, routes![health])
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;mount&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;static&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, FileServer::from(relative!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)))
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;mount&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;assets&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, FileServer::from(relative!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;assets&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; main function
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shuttle_runtime&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; shuttle_rocket::ShuttleRocket {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; rocket = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(rocket.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I&#x27;ve gone ahead and added templating for Tera as well. You&#x27;ll need to do &lt;code&gt;cargo add tera&lt;&#x2F;code&gt; to add the dependency to your &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; configuration. We pull in Rocket&#x27;s &lt;code&gt;fs&lt;&#x2F;code&gt; module and leverage the &lt;code&gt;FileServer&lt;&#x2F;code&gt; method, passing it a relative path to the folder called &#x27;static&#x27; which will live in the root of your project and serve as home to static assets. While you&#x27;re at it, at the same level, create a folder called &#x27;templates&#x27;. When done, your project directory tree should look like:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jeff-mitchell.dev&#x2F;blog&#x2F;2024&#x2F;2024-09-15-serving-the-web-with-rocket&#x2F;directory-structure-static-files.png&quot; alt=&quot;project directory tree&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tera-templating&quot;&gt;Tera Templating&lt;&#x2F;h2&gt;
&lt;p&gt;I sort of folded a couple of steps into one above, so let&#x27;s talk about the templating step a little more. Rocket has super easy support for the &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;keats.github.io&#x2F;tera&#x2F;&quot;&gt;Tera&lt;&#x2F;a&gt; templating engine, which is the one I&#x27;ve been focusing on lately. We add support for templating in general by pulling in &lt;code&gt;rocket_dyn_templates&lt;&#x2F;code&gt; as a dependency, specifically the &lt;code&gt;context!&lt;&#x2F;code&gt; macro and &lt;code&gt;Template&lt;&#x2F;code&gt; responder. In our &lt;code&gt;create()&lt;&#x2F;code&gt; function, we have to add a so-called &amp;quot;fairing&amp;quot;, which automatically registers all available templates saved in the &lt;code&gt;&#x2F;templates&lt;&#x2F;code&gt; folder in the project root.&lt;&#x2F;p&gt;
&lt;p&gt;We add a route and handler function which serves back the equivalent of &lt;code&gt;index.html&lt;&#x2F;code&gt;. We pass a message variable, via the &lt;code&gt;context!&lt;&#x2F;code&gt; macro with the text &amp;quot;Hello, World!&amp;quot; which will be rendered into the template at the location of our choice.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;finishing-touches&quot;&gt;Finishing Touches&lt;&#x2F;h2&gt;
&lt;p&gt;There are a couple of last things to do, we need to actually have some templates. Create &lt;code&gt;base.tera.html&lt;&#x2F;code&gt; and &lt;code&gt;index.tera.html&lt;&#x2F;code&gt; in the templates folder, and give them the following content:&lt;&#x2F;p&gt;
&lt;p&gt;base.tera.html:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DOCTYPE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;en&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;charset&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;UTF-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;viewport&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;width=device-width, initial-scale=1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;link &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;rel&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;preload&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;static&#x2F;screen.css&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;as&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;link &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;rel&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;preload&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;static&#x2F;scripts.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;as&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Rocket Web Template | Home&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;link
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;rel&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stylesheet&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;css&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;static&#x2F;screen.css&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;media&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;screen&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;link &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;rel&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;icon&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;image&#x2F;ico&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;static&#x2F;favicon.ico&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;header&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Rocket Web Template&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;header&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;{% block content %}{% endblock %}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;static&#x2F;scripts.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;index.tera.html:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;{% extends &amp;quot;base&amp;quot; %} {% block content %}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;section&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;{{ message }}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;section&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{% endblock content %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;the-moment-of-truth&quot;&gt;The Moment of Truth&lt;&#x2F;h3&gt;
&lt;p&gt;With all these pieces in place:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; shuttle run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once the Rocket web server launches, open your browser and navigate to &lt;code&gt;http:&#x2F;&#x2F;localhost:8000&lt;&#x2F;code&gt; and you should see served up in your browser:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jeff-mitchell.dev&#x2F;blog&#x2F;2024&#x2F;2024-09-15-serving-the-web-with-rocket&#x2F;rocket-hello-world.png&quot; alt=&quot;Rocket Hello World&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Easy peasy!&lt;&#x2F;p&gt;
&lt;p&gt;From here, you can add more resources, routes, logic, whatever you need. Assets are served up from the &lt;code&gt;assets&lt;&#x2F;code&gt; folder and you can apply CSS styles and JavaScript as you traditionally would in a vanilla web tech site.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing Thoughts&lt;&#x2F;h2&gt;
&lt;p&gt;I think it&#x27;s lazy to default to JavaScript for the backend when simple, easy to get started with solutions like Rocket exist. Yes, you have to know Rust, and that can be a blocker, but you don&#x27;t have to know &lt;em&gt;that&lt;&#x2F;em&gt; much Rust. You sure won&#x27;t be forced into dealing with lifetimes and all the higher order concepts alone. Rocket takes care of many things for you and quite simply just gets out of your way.&lt;&#x2F;p&gt;
&lt;p&gt;Think about it, for your next project.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;rocket.rs&#x2F;guide&#x2F;v0.5&#x2F;&quot;&gt;The Rocket Programming Guide&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;keats.github.io&#x2F;tera&#x2F;&quot;&gt;Tera Template Engine for Rust&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Saving the Day: Error Handling</title>
        <published>2024-09-14T00:00:00+00:00</published>
        <updated>2024-09-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-09-14-error-handling/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-09-14-error-handling/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-09-14-error-handling/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;Today, we look at error handling in Rust. The sophistication of error handling is one of the language&#x27;s biggest advantages. It&#x27;s easy to gracefully handle whatever errors may arise. It can also be a source of frustration, because the compiler lets you get away with nearly nothing, expecting all paths, including error paths, to be handled. Compared to a dynamically typed language, this can feel a bit straight jacket-ish. The benefit is fewer surprises when things go wrong. By thinking just that little bit harder up front, and leveraging the tools Rust provides, the output is something you&#x27;ll have to worry about less.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take a look more deeply.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;to-recover-or-not-to-recover-that-is-the-question&quot;&gt;To Recover or Not to Recover...That is the Question&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;s a fact of life that operations can fail. When things go wrong, what can we do? Errors come in two flavours when programming in Rust, unrecoverable and recoverable.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Unrecoverable Errors&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes, things go so wrong that there&#x27;s just nothing that can be done. In these instances, we halt execution of our program and provide some final message or output that will allow you the programmer to (hopefully) figure out what went wrong. The in built way of doing this in Rust is to use the &lt;code&gt;panic!&lt;&#x2F;code&gt; macro, which halts execution, cleans up the stack and dumps you out to the terminal with a terse error message.&lt;&#x2F;p&gt;
&lt;p&gt;Rust gives us the ability to not deal with errors at all, via the &lt;code&gt;.unwrap()&lt;&#x2F;code&gt; method. If we know an operation or function will fail but we don&#x27;t care, we can just choose to throw the error away. If there is no happy path, the program will simply error out with a panic and terminate. There are times when it&#x27;s appropriate to use &lt;code&gt;unwrap()&lt;&#x2F;code&gt;, mainly in cases where a) we know the failure path is not a problem or unlikely to occur or b) as a starting point. It can frequently be a stepping stone to unwrap on something, then later handling the error more gracefully.&lt;&#x2F;p&gt;
&lt;p&gt;A variation on &lt;code&gt;.unwrap()&lt;&#x2F;code&gt; is &lt;code&gt;.expect()&lt;&#x2F;code&gt; which panics, but allows you to attach context which is output when the panic happens.&lt;&#x2F;p&gt;
&lt;p&gt;All of the above have one thing in common, program execution is over when they happen.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Recoverable Errors&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There are many instances where, yes, something can go wrong, but whatever it was could be recovered from such that we pick ourselves up, dust off, and carry on. We can communicate some bit of information to the user such that they can fix a typo in their input or make an alternate choice that lets the program continue.&lt;&#x2F;p&gt;
&lt;p&gt;Fortunately, Rust provides a nice way for us to, once again, leverage the type system and recover from errors if we choose.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;grace-too-the-result-t-e-type&quot;&gt;Grace, Too...The Result&amp;lt;T, E&amp;gt; Type&lt;&#x2F;h2&gt;
&lt;p&gt;I wrote about the &lt;a href=&quot;https:&#x2F;&#x2F;jeff-mitchell.dev&#x2F;blog&#x2F;2023&#x2F;2023-04-14-resultful-thinking-error-handling-in-rust&#x2F;&quot;&gt;Result&lt;&#x2F;a&gt; but let&#x27;s have another go with a small program to read text from a file and print it back out. Here&#x27;s the code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;Rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Rust &quot;&gt;&lt;code class=&quot;language-Rust&quot; data-lang=&quot;Rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; src&#x2F;main.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; dependencies
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::fs::File;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::io::{Read, Result};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; main function, returns a std::io::Result&amp;lt;()&amp;gt; type in case of error
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; open the file called test.txt, located in the project root
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; the File::open method returns a result, which could be either the file handle, or an error
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; we use match to determine the courses of action
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; input_file = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;File::open(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test.txt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(file) =&amp;gt; file,
&lt;&#x2F;span&gt;&lt;span&gt;        Err(e) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            eprintln!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unable to read the input file: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, e);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Err(e);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; create an empty, mutable string variable to store the file contents in
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; data = String::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; the read_to_string() method could fail, so again we match
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; print out the data contained in the file to stdout
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; if there was some error in the read operation, we print it out to stderr
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; input_file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read_to_string&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; data) {
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(_) =&amp;gt; println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, data),
&lt;&#x2F;span&gt;&lt;span&gt;        Err(e) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            eprintln!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unable to read the file contents as a string: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, e);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Err(e);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;the-operator&quot;&gt;The ? Operator&lt;&#x2F;h2&gt;
&lt;p&gt;The above is a little verbose. Let&#x27;s do better:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;Rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Rust &quot;&gt;&lt;code class=&quot;language-Rust&quot; data-lang=&quot;Rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; src&#x2F;main.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; dependencies
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::fs::File;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::io::{Read, Result};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; input_file = File::open(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test.txt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; data = String::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    input_file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read_to_string&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; data)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we use the Rust &lt;code&gt;?&lt;&#x2F;code&gt; operator, which is some syntactic sugar which does the equivalent of the code in the &lt;code&gt;match {}&lt;&#x2F;code&gt; blocks shown above. This special operator:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;evaluates the &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;&#x2F;code&gt; type that comes back from the IO related operations.&lt;&#x2F;li&gt;
&lt;li&gt;if it&#x27;s the error path, we do an early return and print the error.&lt;&#x2F;li&gt;
&lt;li&gt;if it&#x27;s the Happy Path, execution continues as we expect, the file is read into the variable &lt;code&gt;input_file&lt;&#x2F;code&gt; and later the data contained within the file, is output.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Use of the &lt;code&gt;?&lt;&#x2F;code&gt; operator makes your Rust programs a whole lot more concise. In your mind, when you see it, you can think &amp;quot;possible failure here, we either succeed and carry on, or we error out&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;When the &lt;code&gt;?&lt;&#x2F;code&gt; is used in a function body, the function signature must include returning a Result type. In this instance we say we are &amp;quot;propagating&amp;quot; the error back to the caller, which could potentially be the main function. It will be up to the main function to handle the returned result type in some final, possibly different, way.&lt;&#x2F;p&gt;
&lt;p&gt;When the Result type is used, program termination is more under the programmers control. The type can be used to set pathways that allow recovery and continued program operation. The example program above does not handle errors any more gracefully per se, but using the Result type, together with embelished error information (the actual error is included with the overall message) the programmer gains more control over the messaging.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing Thoughts&lt;&#x2F;h2&gt;
&lt;p&gt;The Rust Book is overly wordy on the matter of error handling. Here I&#x27;ve attempted to break it down in the way I&#x27;ve started to understand and use it. It can be one of the more difficult language aspects to grasp, but once you&#x27;ve got it, it&#x27;s hard to go without it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch09-00-error-handling.html&quot;&gt;The Rust Programming Language: Error Handling&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kerkour.com&#x2F;rust-error-handling&quot;&gt;The simplest guide to error handling in Rust&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>This Week in Rust</title>
        <published>2024-09-12T00:00:00+00:00</published>
        <updated>2024-09-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-09-12-this-week-in-rust/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-09-12-this-week-in-rust/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-09-12-this-week-in-rust/">&lt;p&gt;Hi everyone, it&#x27;s Thursday, which means it&#x27;s time for &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;this-week-in-rust.org&#x2F;blog&#x2F;2024&#x2F;09&#x2F;11&#x2F;this-week-in-rust-564&#x2F;&quot;&gt;This Week in Rust&lt;&#x2F;a&gt;, which went live yesterday.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve only skimmed this weeks issue. One thing that stood out to me was &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;scientificcomputing.rs&#x2F;monthly&#x2F;2024-09&quot;&gt;Scientific Computing in Rust #2&lt;&#x2F;a&gt;. I always nurse the desire to write some piece of computational fluid dynamics software using Rust, but for the moment that goal is out of reach...because skill issues. :)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-week-in-rust&quot;&gt;My Week in Rust&lt;&#x2F;h2&gt;
&lt;p&gt;What have I been working on this week?&lt;&#x2F;p&gt;
&lt;p&gt;Per usual, I drift. I started out the week all fired up about my own static site generator in Rust. Needless to say I didn&#x27;t get far. I have some frustrations with Zola (this platform), and to work through those am working on another version of this blog that will not involve a pre-made theme, but the going is slow there. I&#x27;m unfortunately impatient , which often impacts my ability to truly learn. Always on my mind is building something I understand and document from the ground up, because frequently I just can&#x27;t get into the minds and documentation of others.&lt;&#x2F;p&gt;
&lt;p&gt;A few weeks ago I embarked on a redo of my office intranet site using the &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;yew.rs&quot;&gt;Yew&lt;&#x2F;a&gt; web framework for Rust. I discovered Yew back in 2022 and have always found it approachable and &amp;quot;React&amp;quot; like, in terms of how to structure a web site with routes, views and components. Some aspects of Yew, such as handling form input, and enabling interactivity, have troubled me and I was unable to make progress.&lt;&#x2F;p&gt;
&lt;p&gt;Until last week...&lt;&#x2F;p&gt;
&lt;p&gt;A long time ago, when Google searching about Yew and how to do things, I discovered &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.workfall.com&#x2F;learning&#x2F;blog&#x2F;&quot;&gt;The Workfall Blog&lt;&#x2F;a&gt;. In particular, &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.workfall.com&#x2F;learning&#x2F;blog&#x2F;how-to-handle-forms-efficiently-in-yew-web-development&#x2F;&quot;&gt;this article&lt;&#x2F;a&gt; about form handling kind of filled in some missing pieces I couldn&#x27;t glean from the Yew documentation.&lt;&#x2F;p&gt;
&lt;p&gt;Over the past few days, I practiced in my own intranet site project and am pleased to say that I finally understand how to handle form input. I intend on writing up my own version of that Workfall blog article, to demonstrate my understanding and maybe help out others by creating something more up to date.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;upcoming-articles&quot;&gt;Upcoming Articles&lt;&#x2F;h2&gt;
&lt;p&gt;I remembered I started a piece about serving the web with Rocket. I&#x27;ll finish that this coming weekend and get it posted. I also have a piece in the oven about error handling. I want to work a small example and give you my thoughts on Rust error handling. Aiming for early next week on both of those.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s it for this week everyone, thanks for reading!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>This Week in Rust</title>
        <published>2024-09-05T00:00:00+00:00</published>
        <updated>2024-09-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-09-05-this-week-in-rust/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-09-05-this-week-in-rust/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-09-05-this-week-in-rust/">&lt;p&gt;Hi everyone, I&#x27;m a day late with my linkup to &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;this-week-in-rust.org&#x2F;blog&#x2F;2024&#x2F;09&#x2F;04&#x2F;this-week-in-rust-563&#x2F;&quot;&gt;This Week in Rust&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As usual, loads of great content to digest this week. The article I highlighted yesterday, about the option of alternate executors, is in the mix.&lt;&#x2F;p&gt;
&lt;p&gt;In other Rust news, Rust 1.81 is live today. Read all the details on the &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2024&#x2F;09&#x2F;05&#x2F;Rust-1.81.0.html&quot;&gt;Rust Blog&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Other Blogs Highlight: Async Rust can be a pleasure to work with</title>
        <published>2024-09-04T00:00:00+00:00</published>
        <updated>2024-09-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-09-04-other-blogs-highlight-async-rust-can-be-a-pleasure/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-09-04-other-blogs-highlight-async-rust-can-be-a-pleasure/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-09-04-other-blogs-highlight-async-rust-can-be-a-pleasure/">&lt;p&gt;I&#x27;ve yet to find out for myself, because I don&#x27;t use async Rust beyond the bounds of frameworks such as Axum. I hear there is eventual agony around the use of async Rust.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;daily.dev&quot;&gt;daily.dev&lt;&#x2F;a&gt;, this article came to my attention:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;emschwartz.me&#x2F;async-rust-can-be-a-pleasure-to-work-with-without-send-sync-static&#x2F;&quot;&gt;Async Rust can be a pleasure to work with (without &lt;code&gt;Send + Sync + &#x27;static&lt;&#x2F;code&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I loved this particular quote:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Some of the pain we feel when writing async Rust today comes from the fact that we&#x27;re circumventing one of the core parts of Rust (using lifetimes and the drop checker for automatic cleanup) and going against the natural &amp;quot;grain&amp;quot; of the language. It&#x27;s not the same as unsafe, but with &#x27;static we are turning off a core part of the language -- and the result is painful.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Until I read this, I didn&#x27;t realize just &lt;em&gt;where&lt;&#x2F;em&gt; the pain comes from.&lt;&#x2F;p&gt;
&lt;p&gt;Give the piece a read, it might just open your eyes.&lt;&#x2F;p&gt;
&lt;p&gt;There are other ways and other choices. I hope to explore more as my experience grows.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>This Week in Rust</title>
        <published>2024-08-29T00:00:00+00:00</published>
        <updated>2024-08-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-08-29-this-week-in-rust/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-08-29-this-week-in-rust/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-08-29-this-week-in-rust/">&lt;p&gt;Hi everyone, I&#x27;m a day late with my linkup to &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;this-week-in-rust.org&#x2F;blog&#x2F;2024&#x2F;08&#x2F;28&#x2F;this-week-in-rust-562&#x2F;&quot;&gt;This Week in Rust&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m down in Seattle for the two Metallica shows that are happening tomorrow and Sunday, yesterday was a travel day down from Vancouver AND I brought my work laptop which was not as fully configured for personal development stuff as my normal computers. Up to speed now.&lt;&#x2F;p&gt;
&lt;p&gt;Noticed that the article I wrote for Shuttle, &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.shuttle.rs&#x2F;blog&#x2F;2024&#x2F;08&#x2F;23&#x2F;rust-as-my-first-language&quot;&gt;Rust as my First Language&lt;&#x2F;a&gt; made it into this week&#x27;s edition, neat!&lt;&#x2F;p&gt;
&lt;p&gt;Anyways, enjoy your TWIR fix for this week.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Solid HTML: A Starting Foundation</title>
        <published>2024-08-27T00:00:00+00:00</published>
        <updated>2024-08-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-08-27-good-html-a-solid-foundation/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-08-27-good-html-a-solid-foundation/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-08-27-good-html-a-solid-foundation/">&lt;p&gt;I get down on myself, a lot. I constantly compare myself to others and their journey in coding. I&#x27;m not (yet) banging up against the rough edges of Rust, solving the rocket science problems necessary to driving the language foward.&lt;&#x2F;p&gt;
&lt;p&gt;I need to re-frame the narrative.&lt;&#x2F;p&gt;
&lt;p&gt;I need to quit with the negative self-judgment.&lt;&#x2F;p&gt;
&lt;p&gt;My journey is my journey, and all that matters is, day by day, month by month, year by year, I&#x27;m steadily able to do more.&lt;&#x2F;p&gt;
&lt;p&gt;Alright, enough navel gazing, this post wasn&#x27;t really intended to be about my negative self image. I wanted to continue for a bit on the theme of basics.&lt;&#x2F;p&gt;
&lt;p&gt;Like it or not, HTML is the starting point of the web, even in 2024.&lt;&#x2F;p&gt;
&lt;p&gt;The first thing the browser loads is...yep, HTML.&lt;&#x2F;p&gt;
&lt;p&gt;Earlier this year, I made a &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sentinel1909&#x2F;vanilla-web-template&quot;&gt;vanilla web template&lt;&#x2F;a&gt; starter for myself. Here is the &lt;code&gt;index.html&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- index.html --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- This is an HTMl page which describes structure of the web site content --&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- The head tag links in the page styles, contained in screen.css, the media tag --&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- helps the user agent (maybe not a browser) understand that the styles are for a screen --&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- The body tag contains the page content, and uses the semantic HTML tags &amp;lt;header&amp;gt;, &amp;lt;main, and --&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- &amp;lt;footer&amp;gt; to describe the header, main content, and footer areas of the page --&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- The scripts tag links in the supporting JavaScript file, which fills in the current year in the footer. --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;DOCTYPE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;en&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;charset&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;UTF-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;viewport&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;width=device-width, initial-scale=1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- set up some preloaders, so the browser knows about them as soon as possible --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;link &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;rel&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;preload&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;styles&#x2F;screen.css&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;as&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;link &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;rel&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;preload&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scripts&#x2F;scripts.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;as&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Vanilla Web Template | Home&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;link &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;rel&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stylesheet&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;css&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;screen.css&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;media&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;screen&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;link &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;rel&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;icon&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;image&#x2F;x-icon&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;href&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;static&#x2F;favicon.ico&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;header&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Hello, World!&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h2&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Welcome to the vanilla web.&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h2&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;header&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;section&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;article&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            This is a plain vanilla web site, written with good &amp;#39;ol
&lt;&#x2F;span&gt;&lt;span&gt;            HTML&#x2F;CSS&#x2F;JavaScript.
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;article&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;section&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;footer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;copy; &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;year&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Jeffery D. Mitchell&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;footer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scripts&#x2F;scripts.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I&#x27;m a big believer in semantic web, so my starter is reflective of that and will get you off on the right foot. I try to keep &lt;code&gt;&amp;lt;div&amp;gt;&lt;&#x2F;code&gt; soup to a minimum. From this minimal starter, you can build out a whole site by adding sub-pages, links, and more content.&lt;&#x2F;p&gt;
&lt;p&gt;I hope it&#x27;s a useful starting point for you, if you don&#x27;t already have your own.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The Mystery of the Hashmap</title>
        <published>2024-08-26T00:00:00+00:00</published>
        <updated>2024-08-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-08-26-the-mystery-of-the-hashmap/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-08-26-the-mystery-of-the-hashmap/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-08-26-the-mystery-of-the-hashmap/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;A little over two years ago, I started seriously doubling down on the Rust programming language. I found &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;zerotomastery.io&quot;&gt;Zero to Mastery&lt;&#x2F;a&gt; and their Rust course. With a great head of steam, as I did the course, I also started blogging my way through the Rust Book. This head of steam continued nicely through the more basic aspects of the language, but as I entered the deeper waters, I faltered.&lt;&#x2F;p&gt;
&lt;p&gt;One of the areas I faltered in was the Hashmap collection type. I found it difficult to think up something specific to write about, but didn&#x27;t want to just rehash&#x2F;regurgitate the chapter content from the Rust book. So, I asked ChatGPT, which is great for offering suggestions, and it gave me a few clues. Oddly enough, this interaction also gave me a clue in general for a structure for future posts on this blog.&lt;&#x2F;p&gt;
&lt;p&gt;I can come up with a problem, then write about how to solve it in a structured way. In this instance, how can we use hashmaps as part of the solution to a particular problem?&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s dive in!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-a-hashmap&quot;&gt;What is a HashMap?&lt;&#x2F;h2&gt;
&lt;p&gt;A HashMap is a data type which stores mappings of keys to values. A hashing function is used to determine placement of these keys and values in memory. The advantage of a HashMap is that the key can be of any type. Rust considers HashMaps as a &amp;quot;collection&amp;quot; so you&#x27;ll see it referred to as a collection type. It&#x27;s not the most used data structure, so you have to bring it into scope in your programs.&lt;&#x2F;p&gt;
&lt;p&gt;HashMaps are stored in heap memory. Their keys must be all of the same type and their values must be all of the same type.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;d like a simple way of remembering snippets of text with a keyword attached to each for searching. I&#x27;d like some tool that will be a portable memory aid. It should let me create, retrieve, update and delete items of knowledge. I&#x27;d like it to have storage so that what I enter is not lost. Finally, I want to be able to take this program with me whereever I go.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;&#x2F;h2&gt;
&lt;p&gt;Admittedly, this is a little contrived, and there are probably much, much better ways to solve this problem, but we&#x27;re going to leverage HashMaps and create a little CRUD (Create, Retrieve, Update, Delete) tool. It&#x27;s not going to be a command line interface (CLI) tool, but will still be terminal based with a menu driven user inteface. We&#x27;ll keep it modular, using functions rather than one giant blob in the main function. We&#x27;ll also try to pull in many of the basic Rust data types, such as enums, and control flow mechanisms, like loop. Lastly, we&#x27;re going to confine ourselves to what&#x27;s available in the Rust standard library, no community crates.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;algorithm-design&quot;&gt;Algorithm (Design)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;em&gt;Data Types - Snippet&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve learned that in Rust, types are central (duh, I know). We begin by thinking about our data and the constrait that it needs to be represented by a HashMap. I want to store text snippetssuch as web links. Our key could be just a word, like &amp;quot;Tera&amp;quot; for entries related to the Tera template engine. The key can just be a string. The associated value is words and characters, representing our code snippet. It could also be stored as a string. We&#x27;re going to wrap our Snippet HashMap in a struct, which will let us implement the &lt;code&gt;Default&lt;&#x2F;code&gt; trait for it, making it easy to initialize or even outright reset our data. Our Snippet type will look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Snippet {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;: HashMap&amp;lt;String, String&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We could do this without the struct, but I&#x27;m trying to practice some concepts here so bear with me. It&#x27;s always a good idea to derive the &lt;code&gt;Debug&lt;&#x2F;code&gt; trait on any struct, so we do it for good measure.&lt;&#x2F;p&gt;
&lt;p&gt;We can then implement the &lt;code&gt;Default&lt;&#x2F;code&gt; trait, which will initialize and return and empty Snippet HashMap for us;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Default &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Snippet {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    item: HashMap::new()
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;Data Types - Menu Items&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We need something to represent the main menu of our program, which will need to present 5 choices: Create, Retrieve, Update, Delete, Exit. The natural choice here is an enum. It will look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;Menu {
&lt;&#x2F;span&gt;&lt;span&gt;  Create,
&lt;&#x2F;span&gt;&lt;span&gt;  Retrieve,
&lt;&#x2F;span&gt;&lt;span&gt;  Update,
&lt;&#x2F;span&gt;&lt;span&gt;  Delete,
&lt;&#x2F;span&gt;&lt;span&gt;  Exit
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;Methods on the Snippet Type&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Once our data type is set, we can think in terms of methods on the data. What we will need will look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Snippet {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; create method - creates new code snippets, given a key and a value
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;retrieve&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; retrieve method - retrieves any code snippet, given a key
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; this method will also act as a way of displaying snippets
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; update method - updates any code snippet, given a key
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; (Note: this one is tricky, we&amp;#39;ll see later...)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;delete&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; delete method - delete any code snippet, given a key
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;General Program Structure&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll need to declare our data types, their methods, as well as a couple of helper functions. We&#x27;ll need functions which display the menu, get input from the user, and read&#x2F;write to our storage medium, which will just be a file.&lt;&#x2F;p&gt;
&lt;p&gt;The program will run in a loop, presenting menu choices to the user for further action. The loop will be endless until the user chooses the &amp;quot;Exit&amp;quot; menu option, at which time the program will terminate.&lt;&#x2F;p&gt;
&lt;p&gt;After a couple of weeks of messing about, and yes, drifting between other things, here&#x27;s what I came up with:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;final-code&quot;&gt;Final Code&lt;&#x2F;h3&gt;
&lt;p&gt;In future I probably won&#x27;t spit out the entire code like this, but for today I will. Here&#x27;s the final result:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; src&#x2F;main.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; dependencies
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::collections::HashMap;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::fs;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::io::{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, Write};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; type aliases
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;UpdateResult = std::result::Result&amp;lt;(), String&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; struct type to represent a code Snippet
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Default)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Snippet {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;: HashMap&amp;lt;String, String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; methods for the Snippet type
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Snippet {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; create method; creates a new key, value pair, returns an String wrapped by the Option type
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: String) -&amp;gt; Option&amp;lt;String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.items.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(key, value)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; retrieve method; retrieves a given value given a key, returns a reference to a String, wrapped by the Option type
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;retrieve&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: String) -&amp;gt; Option&amp;lt;&amp;amp;String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.items.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;key)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; update method; updates the value associated with a given key returns the unit type or an error String, wrapped in a Result type
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;updated_value&lt;&#x2F;span&gt;&lt;span&gt;: String) -&amp;gt; UpdateResult {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.items
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_mut&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;key)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;| *value = updated_value)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ok_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|| format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Item &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39; not found&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, key))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; delete method; deletes a key, value pair given a key, returns a String, wrapped by the Option type
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;delete&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: String) -&amp;gt; Option&amp;lt;String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.items.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;key)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; enum type for the application menu
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;Menu {
&lt;&#x2F;span&gt;&lt;span&gt;    Create,
&lt;&#x2F;span&gt;&lt;span&gt;    Retrieve,
&lt;&#x2F;span&gt;&lt;span&gt;    Update,
&lt;&#x2F;span&gt;&lt;span&gt;    Delete,
&lt;&#x2F;span&gt;&lt;span&gt;    Exit,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; function to read in any saved input
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;read_data&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; std::io::Result&amp;lt;Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; data = fs::read(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;data&#x2F;items.txt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)?;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(data)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; function to convert the saved input into our Snippet type
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;input_to_snippet&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;raw_data&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;snippet&lt;&#x2F;span&gt;&lt;span&gt;: Snippet) -&amp;gt; Snippet {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; string_data = String::from_utf8(raw_data).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unable to read the data stored in the file.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key_value_pairs = string_data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).collect::&amp;lt;Vec&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; pairs: Vec&amp;lt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; = key_value_pairs
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;filter_map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pair&lt;&#x2F;span&gt;&lt;span&gt;| pair.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;split_once&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(key, value) in &amp;amp;pairs {
&lt;&#x2F;span&gt;&lt;span&gt;        snippet.items.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(), value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    snippet
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; function to get user input and pass it back for use
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_user_input&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; io::Result&amp;lt;String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; input = String::new();
&lt;&#x2F;span&gt;&lt;span&gt;    io::stdin().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read_line&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; input)?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; input = input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;trim&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(input)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; function to write output to stdout
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;write_message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;writer&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; dyn Write) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Err(e) = writer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span&gt;(message) {
&lt;&#x2F;span&gt;&lt;span&gt;        eprintln!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error writing to stdout: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, e);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Err(e) = writer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;flush&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        eprintln!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error flushing stdout: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, e);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; function which triggers the appropriate program functionality, based on the user choice
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handle_menu_choice&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;choice&lt;&#x2F;span&gt;&lt;span&gt;: Menu, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;snippet&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; Snippet, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; dyn Write) -&amp;gt; io::Result&amp;lt;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; choice {
&lt;&#x2F;span&gt;&lt;span&gt;        Menu::Create =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enter the new key:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handle);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; new_key = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_user_input&lt;&#x2F;span&gt;&lt;span&gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enter the new value for that key: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handle);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; new_value = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_user_input&lt;&#x2F;span&gt;&lt;span&gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;            Snippet::create(snippet, new_key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(), new_value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_message&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Created new key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; with value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, new_key, new_value).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handle,
&lt;&#x2F;span&gt;&lt;span&gt;            );
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        Menu::Retrieve =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enter the desired key: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handle);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_user_input&lt;&#x2F;span&gt;&lt;span&gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;Snippet::retrieve(snippet, key) {
&lt;&#x2F;span&gt;&lt;span&gt;                Some(value) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_message&lt;&#x2F;span&gt;&lt;span&gt;(format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Retrieved: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, value).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;(), &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handle)
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                None =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;There is no key value pair that matches&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handle);
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            };
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        Menu::Update =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enter the desired key to update: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handle);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_user_input&lt;&#x2F;span&gt;&lt;span&gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enter the desired new value: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handle);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; updated_value = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_user_input&lt;&#x2F;span&gt;&lt;span&gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _result = Snippet::update(snippet, key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(), updated_value);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_message&lt;&#x2F;span&gt;&lt;span&gt;(format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Updated &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; successfully.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, key).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;(), &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handle);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        Menu::Delete =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enter the desired key to delete: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handle);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_user_input&lt;&#x2F;span&gt;&lt;span&gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result = Snippet::delete(snippet, key);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(deleted) = result {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_message&lt;&#x2F;span&gt;&lt;span&gt;(format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Deleted: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, deleted).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;(), &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handle);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        Menu::Exit =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Exiting the program.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handle);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; main function
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; std::io::Result&amp;lt;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; initialize stdout for output to the terminal
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; handle = io::stdout();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; initialize an instance of our snippet type
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; snippet = Snippet::default();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; load input from the saved file
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; raw_data = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read_data&lt;&#x2F;span&gt;&lt;span&gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; convert the input into the Snippet type
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; data = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;input_to_snippet&lt;&#x2F;span&gt;&lt;span&gt;(raw_data, snippet);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; the main program loop; display the menu choices, act on them, exit the program if &amp;quot;E&amp;quot; is selected
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; display the menu options
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Menu: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handle);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;C - Create &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handle);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;R - Retrieve &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handle);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;U - Update &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handle);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;D - Delete &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handle);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;E - Exit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handle);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; display a message asing for the user to make a menu choice
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enter your choice: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handle);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; trigger the appropriate menu option based on the user&amp;#39;s choice
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_user_input&lt;&#x2F;span&gt;&lt;span&gt;()?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_uppercase&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;handle_menu_choice&lt;&#x2F;span&gt;&lt;span&gt;(Menu::Create, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; data, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handle)?,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;handle_menu_choice&lt;&#x2F;span&gt;&lt;span&gt;(Menu::Retrieve, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; data, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handle)?,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;U&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;handle_menu_choice&lt;&#x2F;span&gt;&lt;span&gt;(Menu::Update, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; data, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handle)?,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;D&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;handle_menu_choice&lt;&#x2F;span&gt;&lt;span&gt;(Menu::Delete, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; data, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handle)?,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;handle_menu_choice&lt;&#x2F;span&gt;&lt;span&gt;(Menu::Exit, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; data, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handle)?;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            _ =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                writeln!(handle, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Invalid Choice. Please enter C, R, U, D, or E.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)?
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;some-key-aspects&quot;&gt;Some Key Aspects&lt;&#x2F;h2&gt;
&lt;p&gt;There are a couple of key things to call out:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I have an odd obsession with not using the `println!&#x27; macro. As of this program, I&#x27;m kind of favouring to not do things with macros.&lt;&#x2F;li&gt;
&lt;li&gt;I&#x27;ve tried to get rid of all pesky &lt;code&gt;.unwraps()&lt;&#x2F;code&gt;, errors should generally be handled decently&lt;&#x2F;li&gt;
&lt;li&gt;I haven&#x27;t made a custom error type or pulled in &lt;code&gt;anyhow&lt;&#x2F;code&gt; or &lt;code&gt;color_eyre&lt;&#x2F;code&gt; because, generally, failures can be handled by returning a &lt;code&gt;std::io::Result&amp;lt;()&amp;gt;&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;I&#x27;ve used one &lt;code&gt;.except()&lt;&#x2F;code&gt;, in the &lt;code&gt;input_to_snippet&lt;&#x2F;code&gt; function, which I feel is reasonable because if you can&#x27;t read in the saved data (the &lt;code&gt;String::from_utf8&lt;&#x2F;code&gt; conversion could fail for characters that are not UTF-8) there&#x27;s not much point in continuing. You may disagree.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;areas-for-further-work&quot;&gt;Areas for Further Work&lt;&#x2F;h2&gt;
&lt;p&gt;This &amp;quot;tool&amp;quot; isn&#x27;t complete. I haven&#x27;t implemented the ability to save yet. I thought I&#x27;d leave you the reader to tackle that. How would you modify my code to append data back to the file? In the future I&#x27;ll write about my solution.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;closing&quot;&gt;Closing&lt;&#x2F;h2&gt;
&lt;p&gt;Thanks for reading. I hope the HashMap collection type is a little less mysterious for you. It&#x27;s much less mysterious for me after going through this exercise.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;code-on-github&quot;&gt;Code on GitHub&lt;&#x2F;h2&gt;
&lt;p&gt;You can find a repo to support for this article here:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sentinel1909&#x2F;memoria-rs&quot;&gt;memoria-rs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch08-03-hash-maps.html&quot;&gt;The Rust Programming Language: Chapter 8.3&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch08-03-hash-maps.html&quot;&gt;Rust Standard Library: HashMap Collection&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Back to Basics: How the Web Works</title>
        <published>2024-08-25T00:00:00+00:00</published>
        <updated>2024-08-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-08-25-back-to-basics-how-the-web-works/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-08-25-back-to-basics-how-the-web-works/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-08-25-back-to-basics-how-the-web-works/">&lt;h2 id=&quot;back-to-basics&quot;&gt;Back to Basics&lt;&#x2F;h2&gt;
&lt;p&gt;Carrying on from &lt;a href=&quot;https:&#x2F;&#x2F;jeff-mitchell.dev&#x2F;blog&#x2F;2024&#x2F;2024-08-24-slow-down-to-speed-up&#x2F;&quot;&gt;yesterday&lt;&#x2F;a&gt;, I&#x27;m going to write a few pieces about the basics of how the web works. Much of my motivation for getting into Rust was WebAssembly, and wanting to take a different path to become a productive web developer. I haven&#x27;t spent near enough time just understanding how exactly the web functions. I&#x27;ve had a stubborn refusal to really dig into the basic building blocks. I&#x27;ll never be independent if I don&#x27;t understand these foundations.&lt;&#x2F;p&gt;
&lt;p&gt;So, I&#x27;m going to rectify that.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-world-wide-web&quot;&gt;The World Wide Web&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;We&#x27;ve learned Earth&#x27;s languages through the World Wide Web&amp;quot; - Optimus Prime&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So what is the world web web anyway? Does anyone even call it that anymore?&lt;&#x2F;p&gt;
&lt;p&gt;Imagine a city in which there are buildings that offer services. Every building has an address and when you visit there as a client, there are helpful staff who give back information which you can then take and assemble into something meaningful. The buildings are servers and they offer web sites. You, as client act as the web browser. When you visit an internet location, a server answers and gives you back a series of files which your browser takes and renders into something meaningful.&lt;&#x2F;p&gt;
&lt;p&gt;This is overly simplistic, but there&#x27;s a lot to unpack at each step and having a high level view of what&#x27;s going on can help.&lt;&#x2F;p&gt;
&lt;p&gt;Every web site, every last one, is built on this foundation of technologies:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;HTML&lt;&#x2F;li&gt;
&lt;li&gt;CSS&lt;&#x2F;li&gt;
&lt;li&gt;JavaScript&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The methods and techniques may vary, but at the end of the day that&#x27;s what the browser needs to render information to you as the viewer.&lt;&#x2F;p&gt;
&lt;p&gt;A web server gives back an HTML file (usually called index.html) which has links to styles (CSS) and scripts (JavaScript). When a browser makes requests for these resources, it does that via links available in the HTML file.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;structure-hyper-text-markup-language-html&quot;&gt;Structure (Hyper-Text Markup Language, HTML)&lt;&#x2F;h2&gt;
&lt;p&gt;Every web site needs bones and a skeleton. It&#x27;s HTML&#x27;s job to express how a web site, including its content and structure, is to be represented. This is the first thing the browser loads. The browser constructs a model in memory, called the Document Object Model (DOM). I always feel slightly dirty when I say DOM...I digress...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;styles-cascading-style-sheets-css&quot;&gt;Styles (Cascading Style Sheets, CSS)&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;s the job of CSS to express what a web site looks like. CSS rules allow you to selectively target HTML elements and apply a style to them. This is the second thing loaded by the browser. The browser also constructs a CSS Object Model (CSSOM) which can be targeted and manipulated dynamically with JavaScript. The style and structure are ultimately combined into a &amp;quot;render tree&amp;quot; which the browser uses to &amp;quot;paint&amp;quot; the final web site into view.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;functionality-javascript&quot;&gt;Functionality (JavaScript)&lt;&#x2F;h2&gt;
&lt;p&gt;A web site can exist with only HTML and CSS, technically you don&#x27;t need anything else. However, it&#x27;s static and relatively boring. You can do a lot with these technologies now, more than 10 years ago, and depending on what you&#x27;re doing minimal interactivity might be fine. Generally speaking though, you&#x27;re going to need some JavaScript. It enables interactivity, the ability to manipulate state, and the ability to change the page content, structure, and style dynamically. JavaScript is the very last thing the browser loads.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;closing&quot;&gt;Closing&lt;&#x2F;h2&gt;
&lt;p&gt;This has been a very basic overview of the fundamental web technologies and how individual web sites work. I&#x27;ll explore each one further and write about them over the next while. You can also read the resources I&#x27;ve linked below for more background!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Learn&#x2F;Getting_started_with_the_web&#x2F;How_the_Web_works&quot;&gt;How the web works&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;web.dev&#x2F;articles&#x2F;critical-rendering-path&#x2F;constructing-the-object-model&quot;&gt;Constructing the Object Model&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;web.dev&#x2F;articles&#x2F;critical-rendering-path&#x2F;render-tree-construction&quot;&gt;Render-tree Construction, Layout and Paint&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Slow Down...to Speed Up...Reflections on the Coding Journey</title>
        <published>2024-08-24T00:00:00+00:00</published>
        <updated>2024-08-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-08-24-slow-down-to-speed-up/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-08-24-slow-down-to-speed-up/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-08-24-slow-down-to-speed-up/">&lt;p&gt;I&#x27;m in a reflective mood this evening.&lt;&#x2F;p&gt;
&lt;p&gt;I feel a bit triggered by my inabilty to build my own Redis on &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;codecrafters.io&quot;&gt;codecraters.io&lt;&#x2F;a&gt;. I figured out the first 4 stages of the &amp;quot;Build Your Own Redis&amp;quot; challenge, pretty much on my own. I hit Stage 5 though, with the need to build a Redis Protocol Parser, and pretty much found myself unable to reason through the steps.&lt;&#x2F;p&gt;
&lt;p&gt;I started watching one of the walkthnroughs and immediately started to hate myself for it.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;You&#x27;ve got to slow down to speed up&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Slow is smooth smooth is fast&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Try to focus on the process, rather than the result. As soon as you start enjoying the beauty of the process, results&#x2F;value will come naturally&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;These are messages I&#x27;ve read, or have been told, by the internet the past few days. This weekend, they are really ringing true.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve been at this coding thing, basically every day, since late December 2020. I&#x27;ve developed a lot of muscle memory, and overall my understanding has grown by leaps and bounds. Even with that, I&#x27;m not improving as much as I want in terms of my problem solving ability.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m not going to quit, far from it, but I&#x27;m definitely going to take a step back and figure out another path. It&#x27;s not Rust per se, it&#x27;s not the language syntax, it&#x27;s a fundamental inability to break things down into small tasks...smaller problems. I&#x27;m unable to ask questions about the task and in doing that form smaller problems to solve. All I can seem to focus on is the final result.&lt;&#x2F;p&gt;
&lt;p&gt;I have to find a way to address this fundamental flaw in my abilities...this obsession with pushing the final result out of my forehead, like Athena sprining from Zeus, without actually doing the work to get there.&lt;&#x2F;p&gt;
&lt;p&gt;The rush stops here and now.&lt;&#x2F;p&gt;
&lt;p&gt;I have to slow down to speed up.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Git - The Bare Bones</title>
        <published>2024-08-23T00:00:00+00:00</published>
        <updated>2024-08-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-08-23-git-bare-bones/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-08-23-git-bare-bones/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-08-23-git-bare-bones/">&lt;p&gt;Early in my &amp;quot;learn to code&amp;quot; journey, I discovered the work of &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.taniarascia.com&quot;&gt;Tania Rascia&lt;&#x2F;a&gt;. I found her fresh and inspiring. Her clean and clear explanation style helped me gain insight into important concepts.&lt;&#x2F;p&gt;
&lt;p&gt;This article today is inspired by some of her work. I&#x27;m going to write a little about git.&lt;&#x2F;p&gt;
&lt;p&gt;Git is a version control system, mostly aimed at software development, but you can use it for anything where you want to track changes and undo any foot wounds inflicted on yourself. Git was built by Linus Torvalds in 2005. You can read a short history of it &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;book&#x2F;en&#x2F;v2&#x2F;Getting-Started-A-Short-History-of-Git&quot;&gt;here&lt;&#x2F;a&gt;. I&#x27;m not going to cover GitHub in this article. Git is the system for version control, whereas GitHub is an online hosted repository for hosting and sharing code &amp;quot;pushed&amp;quot; to it from a local project on your computer.&lt;&#x2F;p&gt;
&lt;p&gt;Alright, let&#x27;s git into it and give you the bare bones...haha, see what I did there? I know...terrible...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-git&quot;&gt;What is Git?&lt;&#x2F;h2&gt;
&lt;p&gt;As I said above, Git is a version control system. Teams benefit most from using it. A group can collaborate on a code base, and by building on &amp;quot;branches&amp;quot;, individuals can work together without stepping on each others toes. Git does the heavy lifting of tracking changes and history of coding projects. While teams benefit most, anyone can add it to their coding workflow.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installing&quot;&gt;Installing&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ll refer you to Tania&#x27;s article on Git, linked in the references.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;initial-steps&quot;&gt;Initial Steps&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s start a Rust program, initially with no support from Git, then we&#x27;ll add it. In fairness, the &lt;code&gt;cargo&lt;&#x2F;code&gt; build tool configures a project for you automatically with git support, but frequently I like to ignore that and git going (yes, I need to stop) after the initial setup is complete. Do this wherever you want to work on your code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --bin --vcs&lt;&#x2F;span&gt;&lt;span&gt; none project-with-git
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A new Rust project that contains a skeleton &amp;quot;Hello World&amp;quot; executable program will be created for you. The &lt;code&gt;--vcs none&lt;&#x2F;code&gt; flag tells Cargo not to do any git setup.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;initialization&quot;&gt;Initialization&lt;&#x2F;h2&gt;
&lt;p&gt;Change into the directory of the project you just created, &lt;code&gt;cd project-with-git&lt;&#x2F;code&gt; and type: &lt;code&gt;git init&lt;&#x2F;code&gt;. This will initialize a repository &amp;quot;repo&amp;quot; for you and create a &lt;code&gt;.git&lt;&#x2F;code&gt; directory which holds the configuration and instructions for how the git will manage the repo.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-to-ignore&quot;&gt;What to Ignore&lt;&#x2F;h2&gt;
&lt;p&gt;Next, type: &lt;code&gt;touch .gitignore&lt;&#x2F;code&gt;. Open the project in your editor of choice, for me that&#x27;s VS Code, and you should see the freshly created &lt;code&gt;.gitignore&lt;&#x2F;code&gt; along with the other project files. Git will track everything in your project if you let it. That&#x27;s great mostly, but you don&#x27;t need to track anything in the &lt;code&gt;&#x2F;target&lt;&#x2F;code&gt; directory, which contains build artifacts and other internals generated by the Rust compiler. Edit your &lt;code&gt;.gitignore&lt;&#x2F;code&gt; to look like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# gitignore for project-with-get
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;target
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The syntax of a &lt;code&gt;.gitignore&lt;&#x2F;code&gt; is pretty straightforward:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;anything preceded by &lt;code&gt;#&lt;&#x2F;code&gt; is a comment&lt;&#x2F;li&gt;
&lt;li&gt;exclude directories by doing &lt;code&gt;&amp;lt;&#x2F;directory_name&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;you can use wildcards, i.e. &lt;code&gt;Shuttle*.toml&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;adding-files-to-track&quot;&gt;Adding Files to Track&lt;&#x2F;h2&gt;
&lt;p&gt;To add the files you do want to track, type: &lt;code&gt;git add .&lt;&#x2F;code&gt; This will add everything not excluded by &lt;code&gt;.gitignore&lt;&#x2F;code&gt; into git&#x27;s list of what to officially keep track of.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;committing&quot;&gt;Committing&lt;&#x2F;h2&gt;
&lt;p&gt;Once you&#x27;ve added the files, changes aren&#x27;t tracked until you actually &amp;quot;commit&amp;quot; them. To do that type: &lt;code&gt;git commit -m &amp;quot;Initial commit&amp;quot;&lt;&#x2F;code&gt; This will create your first commit into the history with the message &amp;quot;Initial Commit&amp;quot;. Well done! You&#x27;ve offically begun tracking the history of this project. You&#x27;re project lives locally on your computer at this point, it&#x27;s not connected to the internet and you are the only one who can work on it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;branching&quot;&gt;Branching&lt;&#x2F;h2&gt;
&lt;p&gt;After the above, youi&#x27;ll be on the &amp;quot;main&amp;quot; branch of your project. Let&#x27;s say you&#x27;ve worked awhile, but change your mind and want to explore another direction, without losing what you just started. You can make a branch.&lt;&#x2F;p&gt;
&lt;p&gt;To create a branch, type: &lt;code&gt;git branch &amp;lt;new-branch-name&amp;gt;&lt;&#x2F;code&gt;. This will create a branch in which you can work on a new feature, a bug fix, or just explore a different direction, but not lose your original work. Branches have to be &amp;quot;checked out&amp;quot; when you make them, by doing: &lt;code&gt;git checkout &amp;lt;new-branch-name&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Follow the sames steps as above to commit your branch into the tracking sytem. You can go back to &lt;code&gt;main&lt;&#x2F;code&gt; by: &lt;code&gt;git checkout main&lt;&#x2F;code&gt;. This will switch you back to your main branch. If you look, you&#x27;ll see that any changes you just made are not in this main branch.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;merging&quot;&gt;Merging&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s say you end up liking the approach you took in the fresh branch you just created. When it comes time to unite the two branches do this: &lt;code&gt;git merge &amp;lt;new-branch-name&amp;gt;&lt;&#x2F;code&gt; this will &amp;quot;merge&amp;quot; the new code into the old and unite it under the &lt;code&gt;main&lt;&#x2F;code&gt; branch. You can then push out to production and the new feature or bug fix will be incorporated.&lt;&#x2F;p&gt;
&lt;p&gt;Pretty nifty hey?!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;There&#x27;s really no reason not to use git. It makes your software development life much easier. If you make a mistake or what to start over, by leveraging the branching system you can simply &amp;quot;switch back&amp;quot; to an earlier point in time. It&#x27;s really a no-brainer.&lt;&#x2F;p&gt;
&lt;p&gt;In this short piece I&#x27;ve given you the basics to get started. From here, you can practice on your own and explore the links I&#x27;ve provided below to learn more. Remember, &lt;code&gt;cargo&lt;&#x2F;code&gt; initializes a git repo for you, you don&#x27;t need to go through the steps above every time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;&quot;&gt;Git&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.taniarascia.com&#x2F;getting-started-with-git&#x2F;&quot;&gt;Getting Started with Git for Version Control&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;firemodels&#x2F;fds&#x2F;wiki&#x2F;Git-Notes-Getting-Started&quot;&gt;Git Notes Getting Started&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>This Week in Rust</title>
        <published>2024-08-22T00:00:00+00:00</published>
        <updated>2024-08-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-08-22-this-week-in-rust/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-08-22-this-week-in-rust/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-08-22-this-week-in-rust/">&lt;p&gt;It&#x27;s Wednesday, you know what that means!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;this-week-in-rust.org&#x2F;blog&#x2F;2024&#x2F;08&#x2F;21&#x2F;this-week-in-rust-561&#x2F;&quot;&gt;This Week in Rust&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Lot&#x27;s of great activity happening in the Rust community.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Serving the Web with Axum</title>
        <published>2024-08-21T00:00:00+00:00</published>
        <updated>2024-08-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-08-21-serving-the-web-with-axum/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-08-21-serving-the-web-with-axum/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-08-21-serving-the-web-with-axum/">&lt;p&gt;Today we dip a toe into the Axum web framework.&lt;&#x2F;p&gt;
&lt;p&gt;Axum is an unopinionated web application framework, written and maintained by the &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tokio.rs&#x2F;&quot;&gt;Tokio&lt;&#x2F;a&gt; team. It’s very light and is built on top of the &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hyper.rs&#x2F;&quot;&gt;hyper&lt;&#x2F;a&gt; HTTP library. Hyper reached a major milestone in November 2023, with it’s version 1.0 release. Axum was bumped to version 0.7 shortly after. The Tokio team wrote a &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tokio.rs&#x2F;blog&#x2F;2023-11-27-announcing-axum-0-7-0&quot;&gt;great blog post&lt;&#x2F;a&gt; explaining the major changes.&lt;&#x2F;p&gt;
&lt;p&gt;Alright, let’s get into some code…&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; src&#x2F;main.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; dependencies
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;axum::{
&lt;&#x2F;span&gt;&lt;span&gt;    response::{Html, IntoResponse},
&lt;&#x2F;span&gt;&lt;span&gt;    routing::get,
&lt;&#x2F;span&gt;&lt;span&gt;    Router,
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::net::SocketAddr;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tokio::net::TcpListener;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; root endpoint handler, sends back a &amp;quot;Hello from Axum!&amp;quot; message in HTML
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;hello_from_axum&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl IntoResponse {
&lt;&#x2F;span&gt;&lt;span&gt;    Html(include_str!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;assets&#x2F;index.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; main function, creates a Router type, attaches our handler to the &amp;quot;&#x2F;&amp;quot; route
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; create an app, has the Router type, has one index route
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; app = Router::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(hello_from_axum));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; create an address
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; addr = IpAddr::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;V4&lt;&#x2F;span&gt;&lt;span&gt;(Ipv4Addr::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;127&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; create a port
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; port: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u16 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8000&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; create a socket to listen on
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; socket = SocketAddr::new(addr, port);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; get a listener, use the socket we just created; the TcpListener::bind method could fail, so we use a match statement to handle that
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; we panic if we can&amp;#39;t get a listener, there&amp;#39;s no point in going any further
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; listener = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;TcpListener::bind(&amp;amp;addr).await {
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(tcp_listener) =&amp;gt; tcp_listener,
&lt;&#x2F;span&gt;&lt;span&gt;        Err(err) =&amp;gt; panic!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Could not get a TcpListener, {}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, err),
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; start up the server with our listener and the app; panics with an error message if the axum::serve function fails
&lt;&#x2F;span&gt;&lt;span&gt;    axum::serve(listener, app)
&lt;&#x2F;span&gt;&lt;span&gt;        .await
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Could not start up the axum server&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;dependencies&quot;&gt;Dependencies&lt;&#x2F;h3&gt;
&lt;p&gt;First, we bring into scope several things from the axum crate itself:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;Html&lt;&#x2F;code&gt; type and &lt;code&gt;IntoResponse&lt;&#x2F;code&gt; trait, both from the response module&lt;&#x2F;li&gt;
&lt;li&gt;the &lt;code&gt;get&lt;&#x2F;code&gt; method from the routing module, used to handle get requests&lt;&#x2F;li&gt;
&lt;li&gt;the &lt;code&gt;Router&lt;&#x2F;code&gt; type, used to compose handlers and services&lt;&#x2F;li&gt;
&lt;li&gt;the &lt;code&gt;SocketAddr&lt;&#x2F;code&gt; type from the standard library&lt;&#x2F;li&gt;
&lt;li&gt;the &lt;code&gt;TcpListener&lt;&#x2F;code&gt; type from the Tokio crate&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Axum relies on the Tokio crate for asyncronous operations, so be sure Tokio is added as a dependency in the Cargo.toml configuration file.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s look at the main function first, then we’ll talk about the single handler function as part of that.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;main-function&quot;&gt;Main Function&lt;&#x2F;h3&gt;
&lt;p&gt;The general algorithm of our main function is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;create an instance of our app; has one route at “&#x2F;”, which accepts a get request and calls our &lt;code&gt;hello_from_axum&lt;&#x2F;code&gt; handler function
&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;hello_from_axum&lt;&#x2F;code&gt; function takes no parameters, it simply returns some HTML created by reading in an &lt;code&gt;index.html&lt;&#x2F;code&gt; file using the &lt;code&gt;include_str!&lt;&#x2F;code&gt; macro&lt;&#x2F;li&gt;
&lt;li&gt;the &lt;code&gt;impl IntoResponse&lt;&#x2F;code&gt; return type indicates that we leverage the fact that Axum knows how to return an Html message without us writing any extra code, the IntoResponse trait is already implemented for the &lt;code&gt;Html&lt;&#x2F;code&gt; type&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;create an address&lt;&#x2F;li&gt;
&lt;li&gt;create a port&lt;&#x2F;li&gt;
&lt;li&gt;use the address and port to create a socket&lt;&#x2F;li&gt;
&lt;li&gt;create a listener, using the socket we just created, to listen for requests; there is some basic error handling here with a match statement, we panic if the attempt to get an address fails&lt;&#x2F;li&gt;
&lt;li&gt;start up the server, using the &lt;code&gt;axum::serve&lt;&#x2F;code&gt; method, passing in the listener and app variables&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Error handling is purposely left fairly basic. It’s generally not a good practice to panic and crash the program, but in this instance it makes sense. The application can’t run without an address to listen on or a listener to receive requests, so if these things fail there isn’t a lot of point in doing anything else.&lt;&#x2F;p&gt;
&lt;p&gt;That’s it!&lt;&#x2F;p&gt;
&lt;p&gt;If you typed everything in correctly, you can start up the basic server by typing:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;into your console. The server should start up and be listening on port 3000. If something happens error wise, you’ll see error messages returned at the console.&lt;&#x2F;p&gt;
&lt;p&gt;Head over to your web browser and type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;http:&#x2F;&#x2F;localhost:8000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You should be greeted with:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jeff-mitchell.dev&#x2F;blog&#x2F;2024&#x2F;2024-08-21-serving-the-web-with-axum&#x2F;hello-from-axum.png&quot; alt=&quot;Hello from Axum&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Pretty cool hey?&lt;&#x2F;p&gt;
&lt;p&gt;I know, not really. It’s pretty basic and not very interesting. Axum is terrific in its simplicity, but at the same time has much power and a great ecosystem. It really is garnering the mindshare of the Rust community and many projects appear to be standardizing around it. I bounced around between things for a long time, but have recently decided to just learn Axum properly.&lt;&#x2F;p&gt;
&lt;p&gt;There are a few warts on this simple server, chief of which is it doesn’t shut down very gracefully. I’ll show you how to do that in a future post.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>This Week in Rust</title>
        <published>2024-08-14T00:00:00+00:00</published>
        <updated>2024-08-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-08-14-this-week-in-rust/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-08-14-this-week-in-rust/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-08-14-this-week-in-rust/">&lt;p&gt;Starting this week, I&#x27;m going to link each week to &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;this-week-in-rust.org&#x2F;blog&#x2F;2024&#x2F;08&#x2F;14&#x2F;this-week-in-rust-560&#x2F;?ref=dailydev&quot;&gt;This Week in Rust&lt;&#x2F;a&gt; when it comes out.
Lot&#x27;s of great activity happening in the Rust community.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Update to Projects page</title>
        <published>2024-08-12T00:00:00+00:00</published>
        <updated>2024-08-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-08-12-update-to-projects/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-08-12-update-to-projects/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-08-12-update-to-projects/">&lt;p&gt;I know, I know, I should be finishing the long-promised Hash Map article. It&#x27;s coming, it&#x27;s coming...I just had to get something off my chest first. I go off on random quests on things that no sane person would do, like using nothing by Hyper and Tokio to build a server. I&#x27;ve done that, created a skeleton, and added a link to the repo on the &lt;a href=&quot;https:&#x2F;&#x2F;jeff-mitchell.dev&#x2F;projects&#x2F;&quot;&gt;projects&lt;&#x2F;a&gt; page.&lt;&#x2F;p&gt;
&lt;p&gt;In terms of use, I&#x27;m not sure this Hyper adventure will ever turn into anything particularly useful. I&#x27;m interested in creating a bullet journaling system for myself, but it&#x27;s not likely that vague notion will ever become reality.&lt;&#x2F;p&gt;
&lt;p&gt;In the meantime, give your head a shake and don&#x27;t follow in my footsteps by raw-dogging the Hyper crate...remember, you&#x27;ve been warned.&lt;&#x2F;p&gt;
&lt;p&gt;~ Jeff Mitchell&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Other Blogs Highlight: Build Your Own SQLite</title>
        <published>2024-08-11T00:00:00+00:00</published>
        <updated>2024-08-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-08-11-other-blogs-highlight-sqlite-from-scratch/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-08-11-other-blogs-highlight-sqlite-from-scratch/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-08-11-other-blogs-highlight-sqlite-from-scratch/">&lt;p&gt;Happy Sunday!&lt;&#x2F;p&gt;
&lt;p&gt;As I ate my breakfast this morning, I did my usual surfing around the internet. Found this article via daily.dev: &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;blog.sylver.dev&#x2F;build-your-own-sqlite-part-1-listing-tables&quot;&gt;Build your own SQLite, Part 1: Listing tables&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This fits nicely with something in my head the past few days, the notion of building everything myself and not relying on anyone else. This is completely unrealistic, I know this, but it&#x27;s just something I&#x27;m toying with as a way of improving my problem solving ability. I&#x27;ve developed enough muscle memory that I have an ability to glue things together, but, my &amp;quot;from scratch&amp;quot; ability is still rather weak. The echos of hearing from the internet that I&#x27;m a fraud and a parasite (long story, not sharing more) are still loud.&lt;&#x2F;p&gt;
&lt;p&gt;Anyways, I&#x27;ve not read the post in full yet, but have added it to my reading list.&lt;&#x2F;p&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>This Week in Rust Highlight: Don&#x27;t Use Preludes and Globs</title>
        <published>2024-08-07T00:00:00+00:00</published>
        <updated>2024-08-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-08-07-twir-highlight-no-preludes-no-globs/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-08-07-twir-highlight-no-preludes-no-globs/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-08-07-twir-highlight-no-preludes-no-globs/">&lt;p&gt;Happy Wednesday everyone!&lt;&#x2F;p&gt;
&lt;p&gt;I have a piece about HashMaps in the works, but am currently attempting to unravel the &lt;code&gt;entry&lt;&#x2F;code&gt; API, so it might be awhile yet before that piece gets published.&lt;&#x2F;p&gt;
&lt;p&gt;In the meantime, I read this &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;corrode.dev&#x2F;blog&#x2F;dont-use-preludes-and-globs&#x2F;&quot;&gt;great piece&lt;&#x2F;a&gt;, currated by the &amp;quot;This Week in Rust&amp;quot; folks, regarding the use of preludes and globs.&lt;&#x2F;p&gt;
&lt;p&gt;TLDR: Don&#x27;t. The author considers them an anti-pattern.&lt;&#x2F;p&gt;
&lt;p&gt;I tend to not use preludes myself. I like to pull in only what I need AND it helps me to understand specifically what I&#x27;m using from the library.&lt;&#x2F;p&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>rust-pdf-extractor - Turning PDF Documents into Plain Text</title>
        <published>2024-07-31T00:00:00+00:00</published>
        <updated>2024-07-31T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-07-31-rust-pdf-extractor-program-of-the-week/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-07-31-rust-pdf-extractor-program-of-the-week/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-07-31-rust-pdf-extractor-program-of-the-week/">&lt;p&gt;It&#x27;s the last day of July 2024, just where is the time going? It&#x27;s mid-week, so I&#x27;m concluding the month with my Rust program of the week.&lt;&#x2F;p&gt;
&lt;p&gt;I wrote this a couple of weeks ago, pretty much all from my own head with the barest minimum of ChatGPT suggestions. I wrote it for use at work, where I want to get pdf content into a more maleable format. There are some technical resources used in my line of work that I&#x27;d like to convert into web based content, so I thought having something that could take a pdf and convert it to plain text would be useful.&lt;&#x2F;p&gt;
&lt;p&gt;This project leverages two community crates:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;clap (for CLI input)&lt;&#x2F;li&gt;
&lt;li&gt;pdf_extract (for doing the heavy conversion lifting)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In addition to these crates, I lean on the standard library for file IO functions.&lt;&#x2F;p&gt;
&lt;p&gt;I may eventually convert this project into an API of some sort, but this will take me awhile to figure out.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; src&#x2F;main.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; dependencies
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;clap::Parser;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::fs::File;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::io::{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, prelude::*};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::path::Path;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Parser, Debug)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(version, about, long_about = None)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Args {
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;(short, long)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;(short, long)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; function to extract the content of the pdf and return the bytes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;extract_content&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) -&amp;gt; Result&amp;lt;String, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; content = pdf_extract::extract_text_from_mem(&amp;amp;input)?;
&lt;&#x2F;span&gt;&lt;span&gt;	Ok(content)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; function to read the input file contents
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;read_input&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input_file&lt;&#x2F;span&gt;&lt;span&gt;: String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdout&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; dyn Write) -&amp;gt; Result&amp;lt;Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;	writeln!(stdout, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Input file name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;input_file)?;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; content = std::fs::read(input_file)?;
&lt;&#x2F;span&gt;&lt;span&gt;	Ok(content)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; function to write the output file after extraction
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;write_output&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output_file&lt;&#x2F;span&gt;&lt;span&gt;: String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;: String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stdout&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; dyn Write) -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; path = Path::new(&amp;amp;output_file);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; file = File::create(path)?;
&lt;&#x2F;span&gt;&lt;span&gt;	file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span&gt;(output.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;())?;
&lt;&#x2F;span&gt;&lt;span&gt;	writeln!(stdout, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Output file name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, output_file)?;
&lt;&#x2F;span&gt;&lt;span&gt;	Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; main function
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; args = Args::parse();
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; stdout = io::stdout();
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; pdf = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read_input&lt;&#x2F;span&gt;&lt;span&gt;(args.input, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; stdout)?;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; text = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;extract_content&lt;&#x2F;span&gt;&lt;span&gt;(pdf)?;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_output&lt;&#x2F;span&gt;&lt;span&gt;(args.output, text, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; stdout)?;
&lt;&#x2F;span&gt;&lt;span&gt;	writeln!(stdout, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Conversion from pdf to plain text completed successfully.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)?;
&lt;&#x2F;span&gt;&lt;span&gt;	Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I haven&#x27;t put this code into a GitHub repo yet, but eventually will.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>String Theory</title>
        <published>2024-07-30T00:00:00+00:00</published>
        <updated>2024-07-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-07-30-string-theory/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-07-30-string-theory/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-07-30-string-theory/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;String in Rust are hard. The difficulty stems from the different ways strings are handled by the language. This article reflects the two core types of strings and my understanding of them. It will evolve over time. Be aware, this does not offer the be-all-end-all explanation of strings. The main purpose here is to provide a jumping off point for me, and you, to dive deeper as needed. To often, I avoid writing because I feel I can&#x27;t do a topic justice.&lt;&#x2F;p&gt;
&lt;p&gt;This is just an excuse.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s go.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-the-heck-is-utf-8&quot;&gt;What the Heck is UTF-8?&lt;&#x2F;h2&gt;
&lt;p&gt;Before we can examine the string collection type in Rust. We need to understand what is UTF-8, which stands for Unicode Transformation Format - 8 bits. I&#x27;m not going to attempt to write about it, it&#x27;s well explained here: &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;blog.hubspot.com&#x2F;website&#x2F;what-is-utf-8&quot;&gt;What is UTF-8 Encoding? A Guide for Non-Programmers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In a nutshell, UTF-8 is an encoding method which covers every character in any human language, yes emojis included.&lt;&#x2F;p&gt;
&lt;p&gt;Rust encodes strings into UTF-8 by default.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;flavours-of-strings&quot;&gt;Flavours of Strings&lt;&#x2F;h1&gt;
&lt;p&gt;The internet will yell at me if I don&#x27;t point out the fact that there are &lt;strong&gt;many&lt;&#x2F;strong&gt; string types in Rust, I&#x27;m not going to list them all. However, in your day to day Rusting, I maintain there are really two you&#x27;re going to care about:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;String&lt;&#x2F;code&gt; type&lt;&#x2F;li&gt;
&lt;li&gt;the &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; type&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let&#x27;s get into &#x27;em.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;strings-are-magical-paper&quot;&gt;Strings are Magical Paper&lt;&#x2F;h2&gt;
&lt;p&gt;In preparing this article, I asked to ChatGPT to explain the String type to me like I was five. Here&#x27;s what it came up with, which I thought was pretty good:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
Let&#x27;s imagine that a String in Rust is like a magical piece of paper that can change its size to hold different words or sentences.
&lt;p&gt;Magic Paper: The String is like a piece of paper that you can write on. If you write &amp;quot;Hello,&amp;quot; it fits perfectly. If you want to write &amp;quot;Hello, world!&amp;quot; instead, the paper can grow to fit the new words.&lt;&#x2F;p&gt;
&lt;p&gt;Easy to Change: You can add more words to your magical paper. If you have &amp;quot;Hello&amp;quot; and you want to add &amp;quot; world,&amp;quot; you can just stick it on, and the paper will get bigger to fit the new words.&lt;&#x2F;p&gt;
&lt;p&gt;Special Marker: This paper has a special marker called the end marker. It always knows where the end of your writing is, so it knows exactly how long your sentence is.&lt;&#x2F;p&gt;
&lt;p&gt;Start Small, Grow Big: You don&#x27;t need to know how big your sentence will be at the beginning. You can start with a tiny piece of paper and let it grow as you add more words.&lt;&#x2F;p&gt;
&lt;p&gt;Super Flexible: You can do all sorts of things with this magical paper. You can take words away, change them, or even find out how many letters there are.&lt;&#x2F;p&gt;
&lt;p&gt;In Rust, the String type works just like this magical paper. It&#x27;s a flexible, growable piece of text that you can change however you want. It&#x27;s different from a &amp;amp;str (a string slice) which is more like a regular piece of paper that can&#x27;t change size.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I thought this was actually pretty good.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;code&gt;String&lt;&#x2F;code&gt; is a growable, mutable, owned, UTF-8 encode type. Behind any &lt;code&gt;String&lt;&#x2F;code&gt; is a &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; where the type is bytes, it is a collection of bytes organized into a vector.&lt;&#x2F;p&gt;
&lt;p&gt;There are several ways to crate a &lt;code&gt;String&lt;&#x2F;code&gt; type, which can be confusing, but they have their time and place.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You can create an empty string: &lt;code&gt;let mut s = String::new();&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;to_string()&lt;&#x2F;code&gt; method is available on an type that implements the &lt;code&gt;Display&lt;&#x2F;code&gt; trait: &lt;code&gt;let s = &amp;quot;I&#x27;m a string&amp;quot;.to_string();&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;We can use &lt;code&gt;String::from()&lt;&#x2F;code&gt; to create a &lt;code&gt;String&lt;&#x2F;code&gt; from a string literal: &lt;code&gt;let s = String::from(&amp;quot;I&#x27;m a string too!);&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The last two a functionally equivalent, your choice comes down to style and preference.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-view-to-a-string&quot;&gt;A View to a String&lt;&#x2F;h2&gt;
&lt;p&gt;That was &lt;code&gt;String&lt;&#x2F;code&gt;, what is a string slice? Again, let&#x27;s ask ChatGPT:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
Let&#x27;s imagine that a string slice in Rust is like a piece of paper with words on it that you can look at but not change.
&lt;p&gt;Snapshot Paper: A string slice, written as &amp;amp;str, is like taking a picture of a part of your magical paper. This picture shows the words exactly as they are, but you can&#x27;t add or remove words from the picture.&lt;&#x2F;p&gt;
&lt;p&gt;Just Looking: If you have a book and you want to show someone just one sentence from a page, you can take a picture of that sentence. They can read the sentence in the picture, but they can&#x27;t change any of the words.&lt;&#x2F;p&gt;
&lt;p&gt;Point to Words: When you have a string slice, you&#x27;re just pointing to some words that are already written down somewhere else. You&#x27;re not making a new copy of the words; you&#x27;re just saying, &amp;quot;Look here!&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;Small Window: You can take a string slice of any part of the text. If your magical paper says &amp;quot;Hello, world!&amp;quot; you can take a slice that just shows &amp;quot;Hello&amp;quot; or &amp;quot;world&amp;quot; or even &amp;quot;lo, wo&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;No Changing Allowed: The important thing is that with a string slice, you&#x27;re not allowed to change the words. It&#x27;s like looking through a window at something outside. You can see it, but you can&#x27;t reach through the window to change it.&lt;&#x2F;p&gt;
&lt;p&gt;In Rust, a string slice (&amp;amp;str) is a way to look at a piece of text without changing it. It’s like pointing at part of a String or another piece of text and saying, &amp;quot;I want to see this part,&amp;quot; but not being able to change what you see.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;A &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; is a pointer into memory which holds a string slice.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;use-cases-when-to-choose-string-over-str&quot;&gt;Use Cases - When to Choose &lt;code&gt;String&lt;&#x2F;code&gt; over &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;String&lt;&#x2F;code&gt; type is most useful when you don&#x27;t want to worry about ownership and lifetimes. However, be aware that you&#x27;re allocating memory every time you create a new &lt;code&gt;String&lt;&#x2F;code&gt; variable. This may incur a performance penalty that&#x27;s unacceptable. Also, the &lt;code&gt;String&lt;&#x2F;code&gt; type doesn&#x27;t implement the &lt;code&gt;Copy&lt;&#x2F;code&gt; trait, so using it as a field in a &lt;code&gt;struct&lt;&#x2F;code&gt; may cause issues and cloning is your best option...which again, may incur a performance hit that might or might not be ok.&lt;&#x2F;p&gt;
&lt;p&gt;Since a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; is a view to a String, you can&#x27;t change it, you can only view it. The &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; type is good for function parameters, where many times you&#x27;re just passing information in and don&#x27;t need to worry about ownership of the data being passed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;That was your brief introduction to strings in Rust! This is a very, very watered down version, there is much more to know. Please check out the full scoop in the Rust Book.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch04-03-slices.html&quot;&gt;The Rust Programming Language, Chapter 4.3: The Slice Type&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch08-02-strings.html&quot;&gt;The Rust Programming Language, Chapter 8.2: Storing UTF-8 Encoded Text with String&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rust-by-example&#x2F;std&#x2F;str.html&quot;&gt;Rust By Example: Strings&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;blog-articles&quot;&gt;Blog Articles&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;zerotomastery.io&#x2F;blog&#x2F;how-strings-work-in-rust&#x2F;&quot;&gt;How Strings Work in Rust&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>markdown-html-rs - Converting Markdown Content to HTML</title>
        <published>2024-07-24T00:00:00+00:00</published>
        <updated>2024-07-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-07-24-markdown-to-html-program-of-the-week/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-07-24-markdown-to-html-program-of-the-week/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-07-24-markdown-to-html-program-of-the-week/">&lt;p&gt;Alright folks, here it is...your Rust program of the week. I call it &amp;quot;markdown-html-rs&amp;quot;. It takes in a file with markdown content, including frontmatter, and outputs said markdown content to html.&lt;&#x2F;p&gt;
&lt;p&gt;This project leverages the following community crates:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;clap (for CLI input)&lt;&#x2F;li&gt;
&lt;li&gt;gray-matter (for parsing YAML style front matter)&lt;&#x2F;li&gt;
&lt;li&gt;regex (to help identify front matter)&lt;&#x2F;li&gt;
&lt;li&gt;thiserror (to reduce boilerplate in error handling)&lt;&#x2F;li&gt;
&lt;li&gt;serde (for deserializing the incoming data)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; main.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; A command line program which takes a markdown file as input, converts to HTML, and outputs the HTML file
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; dependencies
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;clap::Parser;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;gray_matter::engine::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;YAML&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;gray_matter::Matter;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;regex::Regex;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;serde::Deserialize;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::fs;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::io::{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, Write};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::string::FromUtf8Error;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;thiserror::Error;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; enum to represent error types
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Error, Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;ConversionError {
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;File read error: {0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    FileRead(std::io::Error),
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Deserialization error: {0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    Deserialization(serde_json::error::Error),
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;File write error: {0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    FileWrite(std::io::Error),
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;HTML write error: {0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    HTMLWrite(std::io::Error),
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Markdown conversion error: {0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    MarkdownConversion(FromUtf8Error),
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Regex error: {0}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    Regex(regex::Error),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; struct to represent command line arguments
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Parser, Debug)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(author, version, about, long_about = None)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Args {
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;(short, long)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filename&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; struct to represent the front matter of the markdown document
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allow&lt;&#x2F;span&gt;&lt;span&gt;(dead_code)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Deserialize)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;FrontMatter {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tags&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Default &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;FrontMatter {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        FrontMatter {
&lt;&#x2F;span&gt;&lt;span&gt;            title: &amp;quot;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            date: &amp;quot;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            tags: Vec::new(),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), ConversionError&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; create an output buffer
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; stdout = io::stdout();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; get the file name from the command line input
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; args = Args::parse();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; read the file contents and save it as a vector of u8
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; convert the file contents into a markdown string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; file_contents = fs::read(args.filename).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(ConversionError::FileRead)?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; markdown_input =
&lt;&#x2F;span&gt;&lt;span&gt;        String::from_utf8(file_contents).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(ConversionError::MarkdownConversion)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; parse the front matter in the input string and deserialize it into a FrontMatter struct
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; remove the front matter, leaving on the body content of the markdown file
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; matter = Matter::&amp;lt;YAML&amp;gt;::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;markdown_input);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; front_matter: FrontMatter = matter
&lt;&#x2F;span&gt;&lt;span&gt;        .data
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;| data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;deserialize&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;transpose&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(ConversionError::Deserialization)?
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or_default&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    writeln!(stdout, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, front_matter).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(ConversionError::FileWrite)?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; frontmatter_regex =
&lt;&#x2F;span&gt;&lt;span&gt;        Regex::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;---\s*\n(?s:.+?)\n---\s*\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(ConversionError::Regex)?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; markdown_body = frontmatter_regex.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;markdown_input, &amp;quot;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; parse the markdown body and convert it to html, any html tags in the markdown file are passed through
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parser = pulldown_cmark::Parser::new(&amp;amp;markdown_body);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; html_output = String::new();
&lt;&#x2F;span&gt;&lt;span&gt;    pulldown_cmark::html::push_html(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; html_output, parser);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; write the html output file
&lt;&#x2F;span&gt;&lt;span&gt;    fs::write(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;output.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, html_output).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(ConversionError::HTMLWrite)?;
&lt;&#x2F;span&gt;&lt;span&gt;    writeln!(stdout, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Markdown converted and saved to output.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(ConversionError::FileWrite)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The GitHub repo lives &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sentinel1909&#x2F;markdown-html-rs&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>nf - An Empty File Maker</title>
        <published>2024-07-16T00:00:00+00:00</published>
        <updated>2024-07-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-07-15-nf-program-of-the-week/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-07-15-nf-program-of-the-week/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-07-15-nf-program-of-the-week/">&lt;p&gt;I&#x27;m going to try to start doing &amp;quot;program of the week&amp;quot; types of articles. Here is the first. It takes a command line argument (the desired file name) and makes that into an empty file.&lt;&#x2F;p&gt;
&lt;p&gt;It uses the following community crates:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;command line argument parsing: &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;clap&quot;&gt;clap&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;colourful, consistent error messages: &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;color-eyre&quot;&gt;color-eyre&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; nf main.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; dependencies
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;clap::Parser;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;color_eyre::eyre::Result;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::fs::File;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::io::{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, Write};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; struct to represent command line arguments
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Parser, Debug)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;(author, version, about, long_about = None)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Args {
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;(short, long)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; main function, program entry point
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; initialize color_eyre
&lt;&#x2F;span&gt;&lt;span&gt;    color_eyre::install()?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; get the command line arguments
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; args = Args::parse();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; create a handle for writing output
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; stdout = io::stdout();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; create the new file
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; new_file = File::create(args.file);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; write a success message or an error if the file couldn&amp;#39;t be created
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; new_file {
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(file) =&amp;gt; write!(stdout, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:#?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; successfully created&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, file)?,
&lt;&#x2F;span&gt;&lt;span&gt;        Err(err) =&amp;gt; write!(stdout, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:#?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, err)?,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The GitHub repo for this project is here: &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sentinel1909&#x2F;nf.git&quot;&gt;nf&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Jeff Mitchell Dev - Re-Re-Loaded</title>
        <published>2024-07-04T00:00:00+00:00</published>
        <updated>2024-07-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            Jeff Mitchell
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2024/2024-07-14-jeff-mitchell-dev-re-reloaded/"/>
        <id>https://jeff-mitchell.dev/blog/2024/2024-07-14-jeff-mitchell-dev-re-reloaded/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2024/2024-07-14-jeff-mitchell-dev-re-reloaded/">&lt;h1 id=&quot;the-road-so-far&quot;&gt;The Road So Far...&lt;&#x2F;h1&gt;
&lt;p&gt;It&#x27;s said that the definition of insanity is doing the same thing over and over again, but expecting different results.&lt;&#x2F;p&gt;
&lt;p&gt;It embarrasses me to think on how many times I&#x27;ve tried to start a blog.&lt;&#x2F;p&gt;
&lt;p&gt;Wordpress, Zola, Medium, roll-your-own, micro-blogging with Twitter (now X), probably some tools I&#x27;ve forgotten...I&#x27;ve tried and failed so many times.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s really shameful, the amount of time spent...wasted really.&lt;&#x2F;p&gt;
&lt;p&gt;The core problem, in all the efforts so far, is a focus on the &amp;quot;platform&amp;quot;, rather than the &amp;quot;writing&amp;quot;. I say I want to write, yet if I&#x27;m honest with myself I avoid it by all these platform iterations.&lt;&#x2F;p&gt;
&lt;p&gt;No more...really this time, no more.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-road-ahead&quot;&gt;The Road Ahead...&lt;&#x2F;h1&gt;
&lt;p&gt;Welcome to the latest, and hopefully last, iteration of my developer oriented blog, built on &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;getzola.org&quot;&gt;Zola&lt;&#x2F;a&gt;, a static site generator built in Rust. I hope to learn and write about Zola in the time ahead, as there is very little content out there about it. I did write quite a lot of content through mid-2022 to the end of 2023, so I&#x27;ll be tidying that up and getting it up here.&lt;&#x2F;p&gt;
&lt;p&gt;I say &amp;quot;developer&amp;quot;, yet I should be careful. I&#x27;m a hobbyist who thinks he can be a software developer. I run before I walk most of the time and spend far too many hours just slinging code at the Rust compiler hoping something sticks. I can get away with that because it&#x27;s all just a hobby and my day job doesn&#x27;t depend on it.&lt;&#x2F;p&gt;
&lt;p&gt;That said, I hope you&#x27;ll derive some benefit from reading. Rust is less than 10 years old and all things considered is still just starting out. Here, in my writing, I&#x27;ll provide my own perspective in learning Rust, which hopefully, you&#x27;ll find somethign that benefits.&lt;&#x2F;p&gt;
&lt;p&gt;For now there is no comments section, nor am I planning one anytime soon. The internet is horrible, no, people on the internet are horrible, and I&#x27;d rather not hear from them. If what you read here leaves you the feeling I&#x27;m an idiot who&#x27;s full of shit, stop reading and move on.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks for spending time here and I do hope you derive some benefit, however small, to enable your own Rust questing.&lt;&#x2F;p&gt;
&lt;p&gt;~Jeff Mitchell&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The Mighty Vector</title>
        <published>2023-11-07T00:00:00+00:00</published>
        <updated>2023-11-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2023/2023-11-07-the-mighty-vector/"/>
        <id>https://jeff-mitchell.dev/blog/2023/2023-11-07-the-mighty-vector/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2023/2023-11-07-the-mighty-vector/">&lt;h2 id=&quot;indtroduction&quot;&gt;Indtroduction&lt;&#x2F;h2&gt;
&lt;p&gt;Today I resume my journey through the Rust Book, in the spotlight is the vector type.&lt;&#x2F;p&gt;
&lt;p&gt;The Rust Book introduces vectors as a &amp;quot;collection&amp;quot;. A vector is similar to an array type, but with the critical difference that a vector can grow and shrink in size. A vector is capable of storing a list of items in a single data structure. All the individual values in a vector are stored next to each other in memory. Vectors can only store data of the same type.&lt;&#x2F;p&gt;
&lt;p&gt;I called this article &amp;quot;The Mighty Vector&amp;quot; because vectors are an extremely versatile and useful way of storing data. I think you&#x27;ll use them quite a bit in your own Rust adventures.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creation&quot;&gt;Creation&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;vec-new-function&quot;&gt;Vec::new() Function&lt;&#x2F;h3&gt;
&lt;p&gt;A fresh, empty vector can be created like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; origin_coordinates: Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = Vec::new();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since we haven&#x27;t initialized this coordinates vector with values, we have to tell the compiler what we want, because otherwise it won&#x27;t know. The vector type provided by the Rust standard library is implemented using generics and can hold any type. In this case we&#x27;ve said that our coordinates vector is going to contain i32 elements.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;vec-macro&quot;&gt;vec! Macro&lt;&#x2F;h3&gt;
&lt;p&gt;More often than not, we want to initialize a vector with some values. Rust gives us a macro, the vec! macro, which creates a vector with whatever values we choose:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; origin_coordinates = vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The initial values allow the compiler to infer what we want, so we don&#x27;t have to use a type annotation like in the first example.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;modifying-a-vector&quot;&gt;Modifying a Vector&lt;&#x2F;h3&gt;
&lt;p&gt;Hopefully you recall that all variables in Rust, when declared, are immutable, they can&#x27;t be changed. If we know we need to change the values in our vector, we need to use the mut keyword:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; coordinates = vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, we can add values to this vector by using the push method:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;coordinates.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;coordinates.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;coordinates.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s make a complete program to see what we get:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; coordinates = vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    coordinates.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    coordinates.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    coordinates.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; coordinate in coordinates {
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, coordinate);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we initialize our vector with some default i32 values, then we push 3 more values into the vector. Finally, we use a for loop to print out the values to the console. Note that we don&#x27;t need any type annotations because the Rust compiler can infer from the information we&#x27;ve provided.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Compiling&lt;&#x2F;span&gt;&lt;span&gt; playground v0.0.1 (&#x2F;playground)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Finished&lt;&#x2F;span&gt;&lt;span&gt; dev &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;unoptimized + debuginfo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; target(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; 0.37s
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Running &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target&#x2F;debug&#x2F;playground&lt;&#x2F;span&gt;&lt;span&gt;`
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;15
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;20
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;reading-the-elements-in-a-vector&quot;&gt;Reading the Elements in a Vector&lt;&#x2F;h3&gt;
&lt;p&gt;So, we can add elements to our vector, how do we read the elements back? Rust gives us a couple of ways, depending on what we want our program to do.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Panic Attack&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The first way of reading an element is by simple indexing.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; coordinates = vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;24&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;23&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; z: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;= &amp;amp;coordinates[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In one of the greatest quirks of computer science, which to this day trips just about everyone up at one time or another, vectors are indexed starting at zero. In the previous example, the indices of our coordinates vector are 0, 1, 2. To get the third element, let&#x27;s call it the &#x27;z&#x27; coordinate, we use &amp;amp; and [] along with the index 2, to give us a reference to the element 23.&lt;&#x2F;p&gt;
&lt;p&gt;This is all fine and happy if the element at the index we request exists. What if it doesn&#x27;t? If it doesn&#x27;t, the program panics and immediately terminates. We might want that behaviour, so it is a legitmate option.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;More Elegant Way&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There is another more elegant way to handle the possibility of a vector element not existing:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; coordinates = vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;24&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;23&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; z: Option&amp;lt;&amp;amp;32&amp;gt; = coordinates.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; z {
&lt;&#x2F;span&gt;&lt;span&gt;    Some(z) =&amp;gt; println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The z coordinate is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{z}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;    None() =&amp;gt; println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Oops, no third element exists in this vector!);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The .get() method, when passed an index that is outside of the vector&#x27;s range, leverages the Option type and returns a None value without the panic. You can then use the match statement to gracefully handle the possibilities. This approach results in more user friendliness than a panic and crash, because you can craft error messages to explain what happened.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;enums-to-store-multiple-types&quot;&gt;Enums to Store Multiple Types&lt;&#x2F;h3&gt;
&lt;p&gt;Remember earlier I said that vectors can only hold data of the same type? Well, I lied a teeny tiny bit. We can leverage Rust&#x27;s enum type to get around this limitation. There are times when we may want to have a list of items that have different types.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;SportsTeam {
&lt;&#x2F;span&gt;&lt;span&gt;    Name(String),
&lt;&#x2F;span&gt;&lt;span&gt;    Conference(String),
&lt;&#x2F;span&gt;&lt;span&gt;    Standing(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; teams = vec![
&lt;&#x2F;span&gt;&lt;span&gt;    SportsTeam::Name(String::from(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Seattle Seahawks&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)),
&lt;&#x2F;span&gt;&lt;span&gt;    SportsTeam::Conference(String::from(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NFC West&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)),
&lt;&#x2F;span&gt;&lt;span&gt;    SportsTeam::Standing(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is not the greatest example, because the variations represented by the enum SportsTeam are not that dramatically different. However, it illustrates that we can create a vector to hold some information about our sports team and because the underlying type of each vector element is an enum, this satisfies the need that the elements all be of the same type.&lt;&#x2F;p&gt;
&lt;p&gt;A vector is stored on the heap. The Rust compiler must know exactly how much memory space to allocate at compile time. A match expression needs to be used which aids the compiler in ensuring that every possible variation is handled. If the data in your program is such that you can&#x27;t know the exhaustive set of types at runtime that a vector will contain, then this enum technique won&#x27;t work. The solution is to use a trait object, which I&#x27;ll cover in a future article.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;This article has been my take on vectors. I&#x27;ve gone over the basics, but be sure to check out the Rust Standard Library documentation for the std::vec module, as there are more things you can do with this powerful and flexible data type.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks for reading!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;vec&#x2F;index.html&quot;&gt;Rust Standard Library, Module std::vec&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch08-01-vectors.html&quot;&gt;The Rust Programming Language, Chapter 8.1 Storing List of Values with Vectors&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Demystifying Middlware in Actix Web</title>
        <published>2023-10-11T00:00:00+00:00</published>
        <updated>2023-10-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2023/2023-10-11-demystifying-middleware-in-actix-web/"/>
        <id>https://jeff-mitchell.dev/blog/2023/2023-10-11-demystifying-middleware-in-actix-web/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2023/2023-10-11-demystifying-middleware-in-actix-web/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;Earlier this year, I worked through &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.zero2prod.com&quot;&gt;Zero to Production in Rust&lt;&#x2F;a&gt; by &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;lpalmieri.com&quot;&gt;Luca Palmieri&lt;&#x2F;a&gt; using the Axum web framework. This a) forced me to learn that framework and b) force me to think when overcoming the differences.&lt;&#x2F;p&gt;
&lt;p&gt;As I moved through the book, I felt that Actix Web seemed the superior choice for someone of my skill level, as it had more hand holding. Axum, for the most part, leaves you to your own devices, which is great if you know what you&#x27;re doing, but not so great if you&#x27;re really just a beginner.&lt;&#x2F;p&gt;
&lt;p&gt;In late September I decided to return to Actix Web and make an API to allow me to track my daily music listening habits. I&#x27;m not going into the details of that project in this post, instead I&#x27;m going to focus on one corner that I found challenging, middleware. Per usual for me, I need to see a purpose or example, which helps me attach meaning to the abstract and enables me to understand how to use a particular language feature. Middleware in Actix Web is not well explained for newcomers. I find the docs do a decent job of explaining the high level theory, but like with the majority of Rust documentation, they lack context and simple examples.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-primer-on-traits&quot;&gt;A Primer on Traits&lt;&#x2F;h2&gt;
&lt;p&gt;Actix Web&#x27;s middleware system is based on the Service and Transform traits. We can&#x27;t talk about these until we brush up a little on traits in Rust. Per the Rust Book:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;em&gt;trait&lt;&#x2F;em&gt; defines functionality a particular type has and can share with other types. We can use traits to define shared behavior in an abstract way. We can use &lt;em&gt;trait bounds&lt;&#x2F;em&gt; to specify that generic type can be any type that has a certain behavior.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Traits are a means of providing your own types with functionality, without having to write all that functionality from scratch yourself. They are like a contract that provide a blueprint to implement functionality.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m not going to go super in depth beyond this, I&#x27;ve linked in the references below to the in-depth chapters in The Rust Book.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-middleware&quot;&gt;What is Middleware?&lt;&#x2F;h2&gt;
&lt;p&gt;The term &amp;quot;middleware&amp;quot; identifies a type of software that sits in the middle between one thing and the next. It can be thought of as a bridge, facilitating communications between parts of a software system. Another good analogy is plumbing. Middleware connects one or more applications so that data came move through them like water through a pipe network.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-use-middleware&quot;&gt;Why use Middleware?&lt;&#x2F;h2&gt;
&lt;p&gt;The main advantage of middleware is it reduces complexity. In the context of a server API, middleware can combine functionality into one block, rather than each endpoint implementing its own version of that functionality. The result is reduced complexity and fewer places to introduce bugs. We&#x27;ll see this in action further on in the example I&#x27;ve created.&lt;&#x2F;p&gt;
&lt;p&gt;Authentication is an area where middleware is often used. Authentication services can be implemented as middleware and &amp;quot;gatekeep&amp;quot; the rest of the application such that the middleware intercepts all incoming requests before passing properly authenticated users to the lands beyond. Handling authentication via middleware saves each endpoint from having to do it. The middleware authenticates the user and either lets them pass on to the endpoint they wanted, or rejects the attempt.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-to-use-middleware-in-actix-web&quot;&gt;How to use Middleware in Actix Web&lt;&#x2F;h2&gt;
&lt;p&gt;Middleware in Actix Web centers around implementing the Service and Transform traits. &lt;em&gt;Both&lt;&#x2F;em&gt; these traits must be implemented on a type. The Transform trait initializes the middleware and acts like a factory. The factory builds the particular service defined by the Service trait. One difficulty I had is separating boiler plate code from the &#x27;real&#x27; code that you write to implement functionality. Let&#x27;s take a look at the bare minimum boiler plate to get off the ground. We&#x27;ll make a simple middleware to process an API key.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; dependencies
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::domain::appstate::AppState;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;actix_web::{
&lt;&#x2F;span&gt;&lt;span&gt;    body::EitherBody,
&lt;&#x2F;span&gt;&lt;span&gt;    dev::{forward_ready, Service, ServiceRequest, ServiceResponse, Transform},
&lt;&#x2F;span&gt;&lt;span&gt;    web::Data,
&lt;&#x2F;span&gt;&lt;span&gt;    Error, HttpResponse,
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;futures_util::future::LocalBoxFuture;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::future::{ready, Ready};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; struct to represent the API key
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Clone)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;ApiKey;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; implement the transform trait for the ApiKey struct
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;S, B&amp;gt; Transform&amp;lt;S, ServiceRequest&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;ApiKey
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    S: Service&amp;lt;ServiceRequest, Response = ServiceResponse&amp;lt;B&amp;gt;, Error = Error&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;S::&lt;&#x2F;span&gt;&lt;span&gt;Future: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    B: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Response = ServiceResponse&amp;lt;EitherBody&amp;lt;B&amp;gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Error = Error;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Transform = ApiKeyMiddleware&amp;lt;S&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;InitError = ();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Future = Ready&amp;lt;Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Transform, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;InitError&amp;gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; create a new instance of the ApiKeyMiddleware struct
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new_transform&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;service&lt;&#x2F;span&gt;&lt;span&gt;: S) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Future {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ready&lt;&#x2F;span&gt;&lt;span&gt;(Ok(ApiKeyMiddleware { service }))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; struct to represent the ApiKeyMiddleware
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;ApiKeyMiddleware&amp;lt;S&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;service&lt;&#x2F;span&gt;&lt;span&gt;: S,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; implement the service trait for the ApiKeyMiddleware struct
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;S, B&amp;gt; Service&amp;lt;ServiceRequest&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;ApiKeyMiddleware&amp;lt;S&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    S: Service&amp;lt;ServiceRequest, Response = ServiceResponse&amp;lt;B&amp;gt;, Error = Error&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;S::&lt;&#x2F;span&gt;&lt;span&gt;Future: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    B: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Response = ServiceResponse&amp;lt;EitherBody&amp;lt;B&amp;gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Error = Error;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Future = LocalBoxFuture&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;, Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Response, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Error&amp;gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    forward_ready!(service);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;: ServiceRequest) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Future {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; bind a call to our service as the variable &amp;#39;fut&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; we have to box a future, so that its size is known at compile time.
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; we also need to pin it in memory, because of the async operation
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; fut = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.service.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span&gt;(req);
&lt;&#x2F;span&gt;&lt;span&gt;		Box::pin(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; response = fut.await?;
&lt;&#x2F;span&gt;&lt;span&gt;			Ok(response)
&lt;&#x2F;span&gt;&lt;span&gt;		})
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Whew! I don&#x27;t know about you but I&#x27;m kind of exhausted. That&#x27;s a lot of code! The trait implementations give us a lot to think about and follow. This middleware will essentially do nothing. All the hard work above just sets it up so that you can wrap your endpoints with it. As it stands above, the boiler plate will pass an unmodified request straight on to the endpoint, whatever that may be.&lt;&#x2F;p&gt;
&lt;p&gt;Alright, let&#x27;s break all this down:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Dependencies&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;we need tools from actix_web and the actix_web::dev module&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;foward_ready is a macro which, as the docs say, is an implementation of the function poll_ready which returns Ready which is a type of future that is immediately ready with a value&lt;&#x2F;li&gt;
&lt;li&gt;Service
&lt;ul&gt;
&lt;li&gt;a trait, for implementing an asynchronous operation from a Request to a Response&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;ServiceRequest
&lt;ul&gt;
&lt;li&gt;a service level request wrapper&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;ServiceResponse
&lt;ul&gt;
&lt;li&gt;a service level response wrapper&lt;&#x2F;li&gt;
&lt;li&gt;in the Transform trait there is a type EitherBody. EitherBody is an enum with two variants, Left and Right. Each variant can contain a BoxBody type, which is a boxed message body with boxed errors&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Transform
&lt;ul&gt;
&lt;li&gt;defines the interface of a service factory and is what builds our middleware service&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;we need the Error struct from actix_web&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;there are a few things from the standard library that are necessary, in order to enable working with futures&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ready
&lt;ul&gt;
&lt;li&gt;a function which immediately returns a future with a value&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Ready
&lt;ul&gt;
&lt;li&gt;a struct which represents our future and it&#x27;s associated value, it&#x27;s the output of the ready function&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;we&#x27;ll also pull in LocalBoxFuture from the futures_util crate&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;LocalBoxFuture is a &amp;quot;An owned dynamically typed Future for use in cases where you can’t statically type your result or need to add some indirection&amp;quot;
&lt;ul&gt;
&lt;li&gt;it doesn&#x27;t have the Send requirement, meaning it can&#x27;t be transferred across thread boundaries&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;em&gt;Structs&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Middleware is always implemented for a type. We need two structs:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ApiKey
&lt;ul&gt;
&lt;li&gt;acts a hook to trigger the middleware&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;ApiKeyMiddleware
&lt;ul&gt;
&lt;li&gt;the actual middleware service that is built, called, and executed&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;em&gt;Transform trait&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When you push aside all the trait bounds and type definitions, the core of the transform trait is the new_transform function. This function takes a &amp;amp;self reference and a service as parameters, and returns a future. You can think of this function as a factory that creates your middleware service. It&#x27;s necessary for each middleware service that you make.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Service trait&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Similar to Transform, there are a lot of trait bounds and type definitions to wade through. Again, the core of the Service trait is the call function. This is where the meat goes. It takes a reference to self and an incoming request as parameters, and returns a future. The Future type definition constrains the call function to return a future or an error.&lt;&#x2F;p&gt;
&lt;p&gt;Clear as mud? I thought so. Let&#x27;s make the boiler plate do something now.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;meat-of-the-matter&quot;&gt;Meat of the Matter&lt;&#x2F;h2&gt;
&lt;p&gt;This middleware will check the validity of an incoming API key. This example was created to run over on &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;shuttle.rs&quot;&gt;Shuttle&lt;&#x2F;a&gt; and I won&#x27;t get into the details of that, except to say the valid API key is stored in a secrets file which is read into and saved in the application state, using web::Data. This approach is overly simplistic and meant mainly for my learning purposes, so that there is something simple where I (and hopefully you) can visualize the flow. In real life you&#x27;re not going to handle an API key in this fashion.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; I&amp;#39;ll just show the completed call function forming part of the Service trait we started earlier
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;: ServiceRequest) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Future {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; get the x-api-key header from the incoming request
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x_api_key = request
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x-api-key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;| value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_str&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; get the valid api key from app state
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; api_key = request
&lt;&#x2F;span&gt;&lt;span&gt;            .app_data::&amp;lt;Data&amp;lt;AppState&amp;gt;&amp;gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;| data.api_key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; check if the api key is valid
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; x_api_key != api_key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_deref&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; return a 401 unauthorized response
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(request, _payload) = request.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_parts&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; response = HttpResponse::Unauthorized().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;finish&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map_into_right_body&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Box::pin(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{ Ok(ServiceResponse::new(request, response)) });  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; error response is returned immediately, we don&amp;#39;t need to &amp;#39;await&amp;#39; it
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; return the request if the API key is valid
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; response = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.service.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span&gt;(request);
&lt;&#x2F;span&gt;&lt;span&gt;        Box::pin(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{ response.await.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(ServiceResponse::map_into_left_body) })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s what&#x27;s happening:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;we read the incoming API key from the &amp;quot;x-api-key&amp;quot; key&#x2F;value pair that comes in with a request header, the content gets converted into a string slice&lt;&#x2F;li&gt;
&lt;li&gt;we read in the valid API key from application state, it gets cloned to make the compiler happy...at least that&#x27;s what I had to do, I&#x27;m sure someone more experience would do it in a better way&lt;&#x2F;li&gt;
&lt;li&gt;we compare the API keys, if they don&#x27;t match the request is refused and an error message is returned&lt;&#x2F;li&gt;
&lt;li&gt;assuming the API key checks out, we pass the request through to it&#x27;s appropriate endpoint.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In the API key validation if block, we split the request into it a request and payload, by destructuring into a tuple. Then, we construct the &amp;quot;unauthorized&amp;quot; error response we want to give, mapping it into the right variant of our ServiceResponse type, which is an EitherBody type because of our trait definition. The right variant of EitherBody typically holds error responses.&lt;&#x2F;p&gt;
&lt;p&gt;If the API key is valid, then we pass through the request, using the left variant of our ServiceResponse type, which represents the response from the middleware, which in this case is the unmodified request.&lt;&#x2F;p&gt;
&lt;p&gt;Ok, so, we finally have some middleware. how do we use it?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;actix_web::{get, web, App, HttpServer, Responder};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;hello&#x2F;{name}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;greet&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: web::Path&amp;lt;String&amp;gt;) -&amp;gt; impl Responder {
&lt;&#x2F;span&gt;&lt;span&gt;    format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, name)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;actix_web&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; or #[tokio::main]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; std::io::Result&amp;lt;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    HttpServer::new(|| {
&lt;&#x2F;span&gt;&lt;span&gt;        App::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;wrap&lt;&#x2F;span&gt;&lt;span&gt;(ApiKey).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;service&lt;&#x2F;span&gt;&lt;span&gt;(greet)    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; our middleware &amp;quot;wraps&amp;quot; the greet endpoint
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;((&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;127.0.0.1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8080&lt;&#x2F;span&gt;&lt;span&gt;))?
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .await
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is the hello world example from the Actix Web docs. I&#x27;ve modified to show where our middleware gets invoked as the app spins up. It&#x27;s called by the .wrap() function the precedes the call to the greet endpoint handler. That&#x27;s it! I haven&#x27;t done it in the snip above, but you would need to bring your ApiKey type into scope with a use statement, assuming it lives in a separate module file. As a point of good practice, and given how long middleware might be, it&#x27;s best to split it up into separate module files.&lt;&#x2F;p&gt;
&lt;p&gt;If you have multiple middleware pieces, you write each one separately and wrap it with a struct in the same fashion. Remember that middleware is executed in the opposite order to registration.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Made it! I hope you enjoyed this short journey through Actix Web middleware. This is not exhaustive, and I&#x27;m sure there are a million nuances I&#x27;ve missed. I hope I&#x27;ve captured for you the flow of what you need to write your own. Remember, the boiler plate above can be added to your project and it will just sit and be ready for expansion. Once it&#x27;s done, it&#x27;s done and you just need to add your logic to the call function within the Service trait implementation.&lt;&#x2F;p&gt;
&lt;p&gt;My purpose here was to understand full blow middleware, so that&#x27;s been the focus of this piece. I would be mistaken to not say that there is a simpler way to do middleware, if it&#x27;s literally something dead simple. It&#x27;s experimental right now, but will likely graduate sometime soon. &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;actix-web-lab&#x2F;latest&#x2F;actix_web_lab&#x2F;middleware&#x2F;fn.from_fn.html&quot;&gt;Simpler Actix Web Middleware&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I invite you to dig deeper in the articles below, especially Luca&#x27;s. He&#x27;s developing the Pavex web framework and in doing that, having to figure out his own take a middleware system. It&#x27;s a terrific read.&lt;&#x2F;p&gt;
&lt;p&gt;Now, venture forth and make some middleware! Good luck!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;actix.rs&#x2F;docs&#x2F;middleware&quot;&gt;Actix Web Documentation: Middleware&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch10-02-traits.html&quot;&gt;The Rust Programming Language, Chapter 10.2, Traits: Defining Shared Behavior&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch19-03-advanced-traits.html&quot;&gt;The Rust Programming Language, Chapter 19.2 Advanced Traits&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.lpalmieri.com&#x2F;posts&#x2F;pavex-progress-report-06&#x2F;&quot;&gt;Pavex DevLog #6: designing safe and ergonomic middlwares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Packages, Modules, and Crates..Oh My!</title>
        <published>2023-07-31T00:00:00+00:00</published>
        <updated>2023-07-31T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2023/2023-07-31-packages-modules-crates-oh-my/"/>
        <id>https://jeff-mitchell.dev/blog/2023/2023-07-31-packages-modules-crates-oh-my/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2023/2023-07-31-packages-modules-crates-oh-my/">&lt;p&gt;Today, I will give you my take on crates, packages and modules. I&#x27;ve found the organization system for Rust programs to be difficult to master. However, time and practice are solidifying things for me.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s dive in...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;crates&quot;&gt;Crates&lt;&#x2F;h2&gt;
&lt;p&gt;A crate is the smallest possible Rust program. The Rust compiler considers this code sample to be a crate:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;Rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Rust &quot;&gt;&lt;code class=&quot;language-Rust&quot; data-lang=&quot;Rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;I am a crate.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An important concept is the crate root. The root is the place the compiler starts from when building out a program. In the tiny example above, whatever we name the file, say &amp;quot;something.rs&amp;quot;, it is the crate root.&lt;&#x2F;p&gt;
&lt;p&gt;There are two types of crates, &lt;em&gt;binary&lt;&#x2F;em&gt; crates and &lt;em&gt;library&lt;&#x2F;em&gt; cates. A &lt;em&gt;binary&lt;&#x2F;em&gt; crate is self contained in that it has an executable file, containing a main function, which can be run on its own without any further action. A &lt;em&gt;library&lt;&#x2F;em&gt; crate contains some piece of functionality meant to be depended on by other crates. It doesn&#x27;t have a main function and can&#x27;t run on its own.&lt;&#x2F;p&gt;
&lt;p&gt;A common way to organize a Rust program is to split it into a binary crate and a library crate. The binary crate contains the executable file, named main.rs or something else you choose. The binary crate then pulls in added functionality from its library crate.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;packages&quot;&gt;Packages&lt;&#x2F;h2&gt;
&lt;p&gt;A package is a bundle of one or more crates that combine to provide some piece of functionality. A package contains a &lt;em&gt;cargo.toml&lt;&#x2F;em&gt; file which explains to the Rust compiler how to build the crates contained within the package. Packages can contain one or more binary crates, but only one library crate. There must be at least one crate in the package, be it binary or library.&lt;&#x2F;p&gt;
&lt;p&gt;The presence of a Cargo.toml file at the root of the project directory defines the package. By default, Cargo follows the convention that src&#x2F;main.rs is the root of a binary crate and src&#x2F;lib.rs is the root of a library crate. The name of the package is taken from the name of the binary or the name of the library, whichever one is present. You can adjust this if you wish and I&#x27;ll talk about it in the next issue.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s totally up to you as to how to organize your Rust programs. I&#x27;ve found a useful way to organize is to have one binary crate, containing a main.rs file which has initialization and startup logic. The binary crate then calls into the library crate which contains the meat of the program. If your Rust program is small, then it&#x27;s overkill to organize in this way. However, for larger code bases, such as APIs, organizing like this helps keep the code modular and readable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;modules&quot;&gt;Modules&lt;&#x2F;h2&gt;
&lt;p&gt;Crates can be further divided with modules which can live either in one file or separate files. Modules serve as an organizational tool, allowing code to be grouped into units for easier re-use. A second purpose of modules is to control privacy of items. Code in a module is private by default, meaning it&#x27;s not visible to other code outside that module. Modules can be made public, meaning they are available to be made into dependencies within the program as a whole. You can put modules all into one file, but this can quickly become difficult to navigate. It&#x27;s usually preferable to setup a structure in which modules are organized into separate files.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;paths&quot;&gt;Paths&lt;&#x2F;h2&gt;
&lt;p&gt;The Rust compiler needs to know where things are. A path can be used in a similar fashion to navigating file system on Windows, Linux, or macOS. Paths can take a couple of forms:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;absolute: the full path starting from the crate root (begins with the crate name for an external crate and begins with the literal crate for code from the current crate)&lt;&#x2F;li&gt;
&lt;li&gt;relative: starts from the current module and uses the keywords self, super or an identifier in the current module (super, for example, will reference the next level up)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;use-keyword&quot;&gt;Use Keyword&lt;&#x2F;h2&gt;
&lt;p&gt;The use keyword brings a module into scope, allowing its contents to be accessible to other parts of a Rust program.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;namespace-operator&quot;&gt;Namespace Operator&lt;&#x2F;h2&gt;
&lt;p&gt;The namespace operator in Rust is a double colon, :: The namespace operator is used in conjunction with the use keyword.&lt;&#x2F;p&gt;
&lt;p&gt;Putting it all together...&lt;&#x2F;p&gt;
&lt;p&gt;With all these concepts in mind, how do we put it all together? Stay tuned...in a future post I&#x27;ll show you how to start using these concepts to make your Rust programs more understandable.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Simple Website Hosting with Shuttle</title>
        <published>2023-06-05T00:00:00+00:00</published>
        <updated>2023-06-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2023/2023-06-05-simple-website-hosting-with-shuttle/"/>
        <id>https://jeff-mitchell.dev/blog/2023/2023-06-05-simple-website-hosting-with-shuttle/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2023/2023-06-05-simple-website-hosting-with-shuttle/">&lt;h2 id=&quot;simple-website-hosting&quot;&gt;Simple Website Hosting&lt;&#x2F;h2&gt;
&lt;p&gt;I discovered &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;shuttle.rs&quot;&gt;Shuttle&lt;&#x2F;a&gt; in mid-to-late 2022. I had &lt;em&gt;just&lt;&#x2F;em&gt; begun to develop the slightest notion of what I was doing with the Rust, since finishing Jayson Lennon&#x27;s Rust course earlier in the year on &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;zerotomastery.io&quot;&gt;Zero to Mastery&lt;&#x2F;a&gt;. My learning has always been through a cocktail of blog posts on Medium, random articles on the internet, and bits of Stack Overflow. Hosting my Rust projects was always a struggle for me. I had started Luca Palmieri&#x27;s &amp;quot;Zero to Production in Rust&amp;quot;, probably too early, and Chapter 5 of the book on deployment hadn&#x27;t really stuck. I wanted to crack the deployment bits, because building things and letting them languish on my hard drive was not something I was interested in. For better for worse, I like to build in public. In reality, given the noise on the internet, it&#x27;s unlikely anyone ever notices, but I enjoy the illusion that I am somehow helping others.&lt;&#x2F;p&gt;
&lt;p&gt;There was an article I hit on Medium at one point about getting your Dockerized Rust app, whatever it was, up on fly.io. I followed that article, and began to understand what I had to do. I adapted the procedure for railway.app, which I also discovered and liked a lot. I managed to get a very early &amp;quot;developer profile&amp;quot; website together, serve it up with a Rocket backend and get the whole thing served up on railway.app. It was great! I remember feeling like so much had finally clicked...it was terrific feeling.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, that first site was difficult to maintain, because my skills were still on the weak side, so I abandoned it.&lt;&#x2F;p&gt;
&lt;p&gt;I still longed for a way to quickly and easily put my creations out into the world.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;enter-shuttle&quot;&gt;Enter Shuttle&lt;&#x2F;h3&gt;
&lt;p&gt;In those early days of discovering the how&#x27;s of deployment with Rust, the thing I came away with most was how complex it was, even for my simple little static website. There was a lot of hacking around and trial and error getting that first Dockerfile together such that railway.app would actually accept and build it. Granted, once it was done it was done, but I didn&#x27;t enjoy the process of getting to a finished DockerFile. I had heard of Shuttle by this point, but when I first discovered this beautiful thing, static file hosting was not yet available. It eventually came along and somewhere early in 2023 I delightedly started to work with static files. I started contributing to the Shuttle documentation for the feature, helping flesh out the instructions and hopefully making the feature easier for others to read, understand, and implement. Shuttle neatly and tidyly takes the pain of Rust deployments away, and I wanted to do my part in showing that to the world in the clearest way I could.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;axum-with-static-files-on-shuttle&quot;&gt;Axum, with Static Files, on Shuttle&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;axum&#x2F;latest&#x2F;axum&#x2F;index.html&quot;&gt;Axum&lt;&#x2F;a&gt; is a Rust web application framework. It is relatively simple to get up and running with and it&#x27;s become my go-to lately for doing things on the web with Rust. In February, I restarted Zero to Production in Rust, doing it in Axum instead of Actix. Unfortunately, I&#x27;ve had to halt that project because I&#x27;ve hit a patch that&#x27;s just out of reach skill wise. I do intend on returning, but am taking a little hiatus for the time being. That hasn&#x27;t stopped me from wanting to learn more about Axum.&lt;&#x2F;p&gt;
&lt;p&gt;Unlike other Rust web frameworks like Actix, Axum doesn&#x27;t have a built in system of middleware. Instead, Axum relies on the Tower ecosystem for creation of support middleware. As far as hosting of static files is concerned, this used to the the territory of the axum-extra crate, which featured a router for single page applications (SPA). The static files example in the Shuttle Docs is based around use of SpaRouter to serve up the files in the static folder that you can provision by annotating your code with &lt;code&gt;#[shuttle_static_folder::StaticFolder] static_folder: PathBuf&lt;&#x2F;code&gt;. SpaRouter was deprecated in version 0.6.0 of axum-extra, in favour of the services available through the &lt;code&gt;tower-http&lt;&#x2F;code&gt; crate.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve never liked the notion of relying on bits that are deprecated so I went on a journey, working out exactly how to replace the relative ease of SpaRouter with a similar one-liner. This &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;robert.kra.hn&#x2F;posts&#x2F;2022-04-03_rust-web-wasm&#x2F;&quot;&gt;article&lt;&#x2F;a&gt; by Robert Krahn, was an important find. Robert has kept it up to date, documenting how to get rid of SpaRouter using &lt;code&gt;ServeDir&lt;&#x2F;code&gt; from &lt;code&gt;tower-http::services&lt;&#x2F;code&gt;. The trouble is, I never understood his code. I set out with the intention of either explaining it (for all of you) or coming up with something simpler.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve cracked it...at least for a folder of vanilla HTML&#x2F;CSS&#x2F;JS files saved into the static folder that Shuttle will provision for you. Let&#x27;s dig in...&lt;&#x2F;p&gt;
&lt;h3 id=&quot;servedir-with-tower-http&quot;&gt;ServeDir with tower-http&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s home right in on main.rs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; src&#x2F;main.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;axum::Router;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::path::PathBuf;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tower_http::services::ServeDir;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shuttle_runtime&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;axum&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    #[shuttle_static_folder::StaticFolder] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;static_folder&lt;&#x2F;span&gt;&lt;span&gt;: PathBuf,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; shuttle_axum::ShuttleAxum {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; build the router
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; router = Router::new()
&lt;&#x2F;span&gt;&lt;span&gt;         .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;nest_service&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, ServeDir::new(static_folder));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(router.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code is pretty much identical to the example you&#x27;ve likely already seen through the Shuttle Docs. The key is &lt;code&gt;use tower_http::services::ServeDir;&lt;&#x2F;code&gt; We bring ServeDir into scope, which gives use a service that serves files from a given directory and all it&#x27;s sub directories.&lt;&#x2F;p&gt;
&lt;p&gt;Once this is in scope, we can use it to build a router with a single endpoint at &amp;quot;&#x2F;&amp;quot;, by using &lt;code&gt;.nest_service&lt;&#x2F;code&gt;. We pass in &lt;code&gt;ServeDir::new(static_folder)&lt;&#x2F;code&gt;, where &lt;code&gt;static_folder&lt;&#x2F;code&gt; is what Shuttle has provisioned for us. Be sure to put all the files you want to host into that static folder, then, deploy to Shuttle by creating a new project container and deploying the project. All the things work, CSS is called properly when linked from the &lt;code&gt;&amp;lt;head&amp;gt;&lt;&#x2F;code&gt; tag and JavaScript is called when linked from the &lt;code&gt;&amp;lt;script&amp;gt;&lt;&#x2F;code&gt; tag. Navigation works as well within the site.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-shuttle-advantage&quot;&gt;The Shuttle Advantage&lt;&#x2F;h3&gt;
&lt;p&gt;If you&#x27;re a Rust afficionado, Shuttle is &lt;strong&gt;the&lt;&#x2F;strong&gt; way to build and showcase your work to the world. You can build and host your creations without twisting the fiddly dials and knobs of Docker. Leave that to the Shuttle folks. They do the hard work so we as developers don&#x27;t have to.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Result-ful Thinking</title>
        <published>2023-04-14T00:00:00+00:00</published>
        <updated>2023-04-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2023/2023-04-14-resultful-thinking-error-handling-in-rust/"/>
        <id>https://jeff-mitchell.dev/blog/2023/2023-04-14-resultful-thinking-error-handling-in-rust/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2023/2023-04-14-resultful-thinking-error-handling-in-rust/">&lt;p&gt;The Result enumeration in Rust is the second special enumeration available in the standard library. It is a powerful tool for error handling and enables you to handle errors in an elegant, recoverable fashion. Using the Result enum is a bit of a shift in thinking from other languages.&lt;&#x2F;p&gt;
&lt;p&gt;The Result enum has the following signature:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;Result&amp;lt;T, E&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;	Ok(T),
&lt;&#x2F;span&gt;&lt;span&gt;	Err(E),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I&#x27;ve yet to write a lot about generics yet, but similar to the Option enum, Result has two generic type parameters. The T represents the type that will be returned in a success case, it&#x27;s wrapped in a n &amp;quot;Ok&amp;quot; variant. The E represents and error type that is reutrned in a failure case, it&#x27;s wrapped in an &amp;quot;Err&amp;quot; variant.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s revisit the contrived example of a program that divides two numbers, as I used in the article on the Option enum:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;divide &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;numerator&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;denominator&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;, String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; denominator == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		Err(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Cannot divide by zero&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;	} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		Ok(numerator&#x2F;denominator)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; numerator = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; denominator = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; answer = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;divide&lt;&#x2F;span&gt;&lt;span&gt;(numerator, denominator);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; answer {
&lt;&#x2F;span&gt;&lt;span&gt;		Ok(ans) =&amp;gt; println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Result: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, ans),
&lt;&#x2F;span&gt;&lt;span&gt;		Err(err) =&amp;gt; println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, err),
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In our main function, we declare a numerator variable and a denominator variable. We call the divide function, sending in the numerator and denominator as parameters. The divide function returns a Result, which will either contain our answer, or an error message. The body of the function uses an if statement to establish the return value, be it error or answer. If the denominator passed in as input is zero, this generates a string stating &amp;quot;Cannot divide by zero&amp;quot;. The main function does a match on the answer value returned by the divide function. We either print out the answer, or print out our error message.&lt;&#x2F;p&gt;
&lt;p&gt;Handling errors in this way is very elegant. Rather than just throw out an error which could be not very meaningful, we can actually write code that explains very specifically what the issue is. The end result is code which is far more robust.&lt;&#x2F;p&gt;
&lt;p&gt;Want to know more about the Result type? Head over to official Rust Programming language book and &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch09-02-recoverable-errors-with-result.html&quot;&gt;read more&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Matchy Matchy</title>
        <published>2022-09-30T00:00:00+00:00</published>
        <updated>2022-09-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2022/2022-09-30-matchy-matchy/"/>
        <id>https://jeff-mitchell.dev/blog/2022/2022-09-30-matchy-matchy/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2022/2022-09-30-matchy-matchy/">&lt;p&gt;My journey in learning the Rust language continues. Today, let’s explore one of Rust’s unique methods of controlling program flow, known as the match construct. The match syntax is really addictive, and sorely missed when you use other languages.&lt;&#x2F;p&gt;
&lt;p&gt;Previously, I’ve explored the traditional ways of controlling program flow, namely if..else and looping. Rust has another way, the match construct, which allows your code to evaluate and act on multiple possibilities.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s dive in and explore through a fun, silly little Star Wars themed example.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;Classification {
&lt;&#x2F;span&gt;&lt;span&gt;    Starfighter,
&lt;&#x2F;span&gt;&lt;span&gt;    Freighter,
&lt;&#x2F;span&gt;&lt;span&gt;    Corvette,
&lt;&#x2F;span&gt;&lt;span&gt;    Frigate,
&lt;&#x2F;span&gt;&lt;span&gt;    StarDestroyer
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_ship_type&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ship&lt;&#x2F;span&gt;&lt;span&gt;: Classification) -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; ship {
&lt;&#x2F;span&gt;&lt;span&gt;        Classification::Starfighter =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A small fighter-type craft&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        Classification::Freighter =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A craft which carries cargo and things&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        Classification::Corvette =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The ship that carried Princess Leia in Star Wars: A New Hope&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        Classification::Frigate =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Like the ship Luke was on at the end of The Empire Strikes Back&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        Classification::StarDestroyer =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The classic wedge shaped subjugator of worlds&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; xwing = Classification::Starfighter;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; millenium_falcon = Classification::Freighter;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; tantive_iv = Classification::Corvette;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; medical_frigate = Classification::Frigate;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; devastator = Classification::StarDestroyer;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;An X-wing is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_ship_type&lt;&#x2F;span&gt;&lt;span&gt;(xwing));
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The Millennium Falcon is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_ship_type&lt;&#x2F;span&gt;&lt;span&gt;(millenium_falcon));
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The Tantive IV is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_ship_type&lt;&#x2F;span&gt;&lt;span&gt;(tantive_iv));
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The Medical Frigate is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_ship_type&lt;&#x2F;span&gt;&lt;span&gt;(medical_frigate));
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The Devastator is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_ship_type&lt;&#x2F;span&gt;&lt;span&gt;(devastator));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We first declare an enumeration which creates some different types of space craft. We then declare a function called get_ship_type whose job is to receive a ship type as a parameter and return a string with a descriptive message. The meat of this function is a match construct.&lt;&#x2F;p&gt;
&lt;p&gt;Match has the notion of “arms” which are evaluated one at a time. The first match that is found forms the return value for the function. The other possibilities are ignored until the function is called again with a different ship type. In this case, our function returns a simple static string. For now, ignore the “tick” lifetime modifier on the static str return type, it isn’t important for the topic at hand. I will write about lifetimes in a future article.&lt;&#x2F;p&gt;
&lt;p&gt;Matches must be exhaustive, all the types we set out in our enum must have a corresponding match arm to check against. The compiler will squawk if you don’t handle all the possibilities.&lt;&#x2F;p&gt;
&lt;p&gt;In the main function, we declare variables, one to represent each of our possible ship classifications. Then, one by one, we print out a message, calling our get_ship_type function each time to gather the rest of the message.&lt;&#x2F;p&gt;
&lt;p&gt;Individual arms within each part of the match can contain multiple Rust statements, simply enclose the code within curly braces. This is where the power of match comes, sophisticated possibilities and code blocks can form each arm of the match. The results of a particular match arm an also bind to a variable.&lt;&#x2F;p&gt;
&lt;p&gt;Match evaluations must be exhaustive. We have to evaluate every possible outcome otherwise a compiler error will occur. What happens if we care about one or two patterns and nothing else? The catch-all pattern, _ , is available. Let’s look at another example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; rand;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rand::Rng;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; dice_roll = rand::thread_rng();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; dice_roll.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;gen_range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20 &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Critical hit!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;        _ =&amp;gt; println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Sorry, you missed.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can copy this code into the Rust Playground and it will compile so that you can see the output.&lt;&#x2F;p&gt;
&lt;p&gt;I haven’t talked about crates yet, but know that we use an external Rust crate which helps generate random numbers. We declare a mutable variable called dice_roll which which contains our random number. Then, we create a random number between 1 and 20 and match on it. If our random number is 20, we print out a success message. If the random number is any other number, then we print out a failure message.&lt;&#x2F;p&gt;
&lt;p&gt;The catch-all is useful in situations where we care about one particular result and others can just have a common outcome.&lt;&#x2F;p&gt;
&lt;p&gt;Match is useful in error handling code. It is also useful in extracting values out of the Some variant within the Option enum type. It’s a little more elegant that plain old if..else and helps your code be more readable and understandable, as you can avoid complex nested logic. There are some advanced concepts that you can incorporate with the use of match, including the notion of “guards”. I’ll discuss these in a future article.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks for reading! I hope you are enjoying your own Rust journey and are feeling more and more empowered by this amazing language.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;references&quot;&gt;References:&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch06-02-match.html&quot;&gt;The Rust Book, Chapter 6.2, The Match Control Flow Construct&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Is it Something or Nothing: The Option Type</title>
        <published>2022-09-13T00:00:00+00:00</published>
        <updated>2022-09-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2022/2022-08-13-option-is-it-something-or-nothing/"/>
        <id>https://jeff-mitchell.dev/blog/2022/2022-08-13-option-is-it-something-or-nothing/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2022/2022-08-13-option-is-it-something-or-nothing/">&lt;p&gt;I apologize, dear readers, for my lack of consistency in posting here on Medium. Writing and generating content is a challenge for me. If I can provide you with a nugget of perspective once a month, that’s what I’m going to aim for. As the saying goes, practice makes perfect, so eventually, you might see more from me. I thank all of you for your interest in reading my thoughts on the Rust language.&lt;&#x2F;p&gt;
&lt;p&gt;In an earlier article, I introduced the notion of enumerations, or enums, that are useful to represent types in Rust. You’ll also recall that Enums can optionally contain data. It’s time to introduce one of two special Rust enums…the Option type. Today I give you a short bite on this topic.&lt;&#x2F;p&gt;
&lt;p&gt;An Option can contain something and or it can contain nothing. It’s a little like Schrödinger&#x27;s Cat, it might be alive (contains something) or it might be dead (contains nothing) and you don’t know until you check. Let’s dive in.&lt;&#x2F;p&gt;
&lt;p&gt;An Option looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;Option&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;	None,
&lt;&#x2F;span&gt;&lt;span&gt;	Some(T),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The None variant is used when the option holds nothing, no data. The Some variant can contain something. The &lt;T&gt; is the notation for a generic type parameter. I haven’t covered generics yet, but their nuts and bolts are not super important for this discussion. In the context of the Option enum, it means a data type of any kind. It could, for example, contain a single integer.&lt;&#x2F;p&gt;
&lt;p&gt;The Option enum provides a graceful way to implement a null value. The notion of a null value has wreaked havoc on the computing world, to say the least.&lt;&#x2F;p&gt;
&lt;p&gt;This Option concept is best illustrated with an example. Consider this program which takes two numbers, tries to divide them, and provides the result:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;divide&lt;&#x2F;span&gt;&lt;span&gt;(numerator: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;, denominator: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Option&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; denominator == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		None
&lt;&#x2F;span&gt;&lt;span&gt;	} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		Some(numerator&#x2F;denominator)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; numerator = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; denominator = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;divide&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10.0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; result {
&lt;&#x2F;span&gt;&lt;span&gt;		Some(x) =&amp;gt; println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Result: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, x),
&lt;&#x2F;span&gt;&lt;span&gt;		None =&amp;gt; println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Sorry, cannot divide by 0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This program has a main function and a function called divide. In the main function, we declare two floating point numbers as the numerator and denominator variables, then we pass them to the divide function and assign the answer to the variable result. The divide function accepts two floating point parameters, the numerator and the denominator. It returns an option, which will either be a floating point number or nothing. The function checks if the denominator is zero, if it is, our returned option is assigned None as its value. If the denominator is non-zero, our math can proceed and our option will return the calculation result.&lt;&#x2F;p&gt;
&lt;p&gt;Back inside the main program, with the result in hand, we run a match expression on it and output the answer. If our option contains something we output the result of the calculation. If our option contains nothing, we output a message stating that you can’t divide by zero.&lt;&#x2F;p&gt;
&lt;p&gt;The option type is almost always combined with a match expression for further processing.&lt;&#x2F;p&gt;
&lt;p&gt;Option is a flexible and versatile construct in the Rust language. It is often used for:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;initial values&lt;&#x2F;li&gt;
&lt;li&gt;optional function arguments&lt;&#x2F;li&gt;
&lt;li&gt;swapping things out of difficult situations&lt;&#x2F;li&gt;
&lt;li&gt;basic error handling, where None is returned and perhaps combined with a message to represent the error&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The Rust standard library documentation has a good in-depth description of the option type. I recommend you read it for the full scoop.&lt;&#x2F;p&gt;
&lt;p&gt;In a future article, I’ll go through the Result type, which is the second special enum type built into the Rust language. Thanks for reading!&lt;&#x2F;p&gt;
&lt;p&gt;References:
&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch06-01-defining-an-enum.html&quot;&gt;The Rust Programming Language, Chapter 6.1, Defining an Enum&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The Memory Doesn&#x27;t Remain</title>
        <published>2022-07-14T00:00:00+00:00</published>
        <updated>2022-07-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2022/2022-07-14-the-memory-doesnt-remain/"/>
        <id>https://jeff-mitchell.dev/blog/2022/2022-07-14-the-memory-doesnt-remain/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2022/2022-07-14-the-memory-doesnt-remain/">&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Fortune, fame, mirror vain, gone insane...but the memory remains!&amp;quot; - Metallica, The Memory Remains&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is the article I’ve been needing to write for about a month (maybe two) but have fretted and procrastinated.&lt;&#x2F;p&gt;
&lt;p&gt;Memory, ownership, borrowing…oh my!&lt;&#x2F;p&gt;
&lt;p&gt;These concepts are probably the most difficult things in Rust. I worry that I’m not doing these topics justice. However, I’m going to shove this worry aside and just go for it. I intend on returning to this article periodically to update it as my understanding improves.&lt;&#x2F;p&gt;
&lt;p&gt;If you never start, you never finish, so here we go…&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dealing-with-garbage&quot;&gt;Dealing with Garbage&lt;&#x2F;h3&gt;
&lt;p&gt;In programming languages, there are two broad approaches to handling the use and cleanup of memory.&lt;&#x2F;p&gt;
&lt;p&gt;The first is manual, as in it’s all on you the programmer. An example is the C language. The C compiler leaves memory use entirely up to you. If you forget to free memory after you’ve finished with it, an error may result because the C compiler is blissfully unaware. More than likely, you’ll be dealing with the consequences later.&lt;&#x2F;p&gt;
&lt;p&gt;The second is so-called garbage collection. Languages such as JavaScript use a built-in memory manager, called a garbage collector, that follows along behind you to clean up memory. This brings overhead, which may be unacceptable for resource-constrained systems.&lt;&#x2F;p&gt;
&lt;p&gt;Rust introduces a third way. The Rust compiler brings a set of rules that are checked at compile time. Code will not compile if any of the rules are broken. The rules do not impact the performance of your program because they are enforced at compile time.&lt;&#x2F;p&gt;
&lt;p&gt;Before we get into the nitty gritty of this seemingly magical system, there are a couple of other general concepts to review.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-stack-vs-the-heap&quot;&gt;The Stack vs. The Heap&lt;&#x2F;h3&gt;
&lt;p&gt;Like C, Rust works within the same two memory regions, the stack and the heap.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;the-stack&quot;&gt;The Stack&lt;&#x2F;h4&gt;
&lt;p&gt;Anytime you create a variable using Rust’s simple types, like an integer, the variable is created on a region of memory known as the stack. Things that go on the stack have to be fixed in size and can’t change. Fresh data is always stored at the top of the stack. Storing on the stack is quick. I recommend the ownership chapter of the Rust Book, which provides a good overview of the stack.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;the-heap&quot;&gt;The Heap&lt;&#x2F;h4&gt;
&lt;p&gt;The heap is a dynamic area of memory that can grow and shrink as needed. When data is placed in the heap, the memory allocator finds a contiguous block of space and returns a reference called a pointer. Accessing memory on the heap is slower than on the stack, because, in effect, it needs to be looked up first. I recommend the ownership chapter of the Rust Book, which serves as a good overview of the heap.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ownership-and-scope&quot;&gt;Ownership and Scope&lt;&#x2F;h3&gt;
&lt;p&gt;Rust has three rules of ownership:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Each Rust value has a variable called its “owner”.&lt;&#x2F;li&gt;
&lt;li&gt;Each value can have only one owner at a time.&lt;&#x2F;li&gt;
&lt;li&gt;When the owner goes out of scope, the value will be dropped.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;To begin thinking about ownership, it’s essential to think about scope. A scope is denoted by curly braces. Here’s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; fuel = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Give me fuel, give me fire&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We declare a string literal and bind it to a variable called fuel. Variable fuel comes into scope as it’s declared. We can do what we need with it right up until the closing curly brace. Past that point, Rust calls a special internal drop function to clean up the trash. The memory that our fuel variable used is freed up.&lt;&#x2F;p&gt;
&lt;p&gt;Any variable in the Rust language is valid when it comes into scope and it remains valid until it goes out of scope. The compiler will throw an error if you attempt to access the value in a variable that has gone out of scope.&lt;&#x2F;p&gt;
&lt;p&gt;A consequence of this notion of validity until the scope ends, where functions are concerned, is that we have to pass in AND pass back anything that we want to use later. If we don’t the values will be lost.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; fuel = String::from(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Give me fuel, give me fire&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(fuel2, len) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;calculate_length&lt;&#x2F;span&gt;&lt;span&gt;(fuel);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The length of &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39; is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, fuel2, len);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;calculate_length&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;: String) -&amp;gt; (String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; length = s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	(s, length)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, we declare a variable called fuel and bind the same string literal as above to it. We then declare a tuple, consisting of a new string variable and an integer (to represent the string length that we’re going to determine) and we bind to the tuple returned by the function calculate length. We pass in our fuel variable to this function.&lt;&#x2F;p&gt;
&lt;p&gt;The function takes our passed string and returns it along with its length. The len() method is used on our passed-in string to determine the length. We finally print the string and its length to the console.&lt;&#x2F;p&gt;
&lt;p&gt;This is a lot of work. We need to do a lot of moving and passing around values to make sure we don’t lose them due to variables going out of scope. Fortunately, we’re saved by the notions of references and borrowing.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;references-and-borrowing&quot;&gt;References and Borrowing&lt;&#x2F;h3&gt;
&lt;p&gt;The second pillar of Rust memory management is the notion of a reference. We can use values owned by other variables without claiming ownership. This is called borrowing.&lt;&#x2F;p&gt;
&lt;p&gt;What if we could simply reference values in variables without taking ownership of them? Let’s revisit our previous example.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; fuel = String::from(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Give me fuel, give me fire&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; len = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;calculate_length&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;fuel);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The length of &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39; is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, fuel, len);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;calculate_length&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;String) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code may not seem simpler, but it is. We declare a string variable and give it a value as before. Next, we call a function to get the string length, but this time we pass in a reference to our fuel variable. The &amp;amp; represents a reference, allowing us to refer to a value without taking ownership of it.&lt;&#x2F;p&gt;
&lt;p&gt;You’ll notice the function signature simplifies as it now takes a reference to a string and returns a usize, which is basically an integer. Inside the function, we again get the length of the string using the len() method.&lt;&#x2F;p&gt;
&lt;p&gt;We have just borrowed the value of another variable to do something with it.&lt;&#x2F;p&gt;
&lt;p&gt;You’ll note here that we don’t need to return the value from the function calculate_length, to give back ownership, because change never had ownership in the first place.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mutability-and-borrowing&quot;&gt;Mutability and Borrowing&lt;&#x2F;h3&gt;
&lt;p&gt;References are immutable by default. We can’t change the value of something we don’t own. To change the value referenced, we have to use a mutable borrow. Let’s look at an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; fuel = String::from(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Give me fuel, give me fire&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;change&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; fuel);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;change&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;some_string&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; String) {
&lt;&#x2F;span&gt;&lt;span&gt;	some_string.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push_str&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, give me that which I desire&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We declare a mutable variable called string and we bind our favourite song lyrics to it. The fuel variable can change because we made it mutable. Next, we call a function called to change and pass it a mutable reference to our fuel variable. Ownership will not be transferred, and the value of fuel will not be moved to the function, because we are simply borrowing this variable. The change function takes a string as a parameter, which is annotated as a reference to a mutable String. The function body appends some text to the string to complete our song lyrics. Once again, the function makes our change but does not have to pass anything back.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;The concepts of ownership and borrowing are difficult to get used to. There is a lot of so-called “fighting the borrow checker” which comes with the early days of learning in Rust. However, over time the concepts do become relatively intuitive. Rust’s rules of ownership combine to make Rust’s code inherently safe, performant and free of the issues that plague languages like C. The compiler checks for us, giving us confidence that our code is, out of the gate, safe and trustworthy.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch04-01-what-is-ownership.html&quot;&gt;The Rust Programming Language, Chapter 4.1, What is Ownership?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch04-02-references-and-borrowing.html&quot;&gt;The Rust Programming Language, Chapter 4.2, References and Borrowing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Method to the Madness</title>
        <published>2022-07-01T00:00:00+00:00</published>
        <updated>2022-07-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2022/2022-07-01-method-to-the-madness/"/>
        <id>https://jeff-mitchell.dev/blog/2022/2022-07-01-method-to-the-madness/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2022/2022-07-01-method-to-the-madness/">&lt;h3 id=&quot;the-method-syntax&quot;&gt;The Method Syntax&lt;&#x2F;h3&gt;
&lt;p&gt;I’m going to turn my attention now to something called the method syntax. It’s common to structs and enums, which I’ve covered in previous outings.&lt;&#x2F;p&gt;
&lt;p&gt;Structs and enums can have methods associated with them. This enables custom functionality to be implemented.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s do this discussion with the help of an example.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;a-circle-calculator&quot;&gt;A Circle Calculator&lt;&#x2F;h3&gt;
&lt;p&gt;Here is a Rust program which will help us calculate the key characteristics of a circle, namely its area, diameter, and circumference. Respectively, these characteristics are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;area: the amount of space inside the circle, the equation for calculating the area is: A = pi x r²&lt;&#x2F;li&gt;
&lt;li&gt;diameter: the “width” of the circle, the equation for calculating the diameter is: D = 2 x r&lt;&#x2F;li&gt;
&lt;li&gt;circumference: the distance around the circle, the equation for calculating the circumference is: C = 2 x pi x r&lt;&#x2F;li&gt;
&lt;li&gt;r is the radius of the circle and pi is the Archimedes’ constant which is 3.14&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::f32:consts::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;PI&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Circle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Circle {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;area&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;PI &lt;&#x2F;span&gt;&lt;span&gt;* (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;diameter&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2.0 &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;circumference&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2.0 &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;PI &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; circle1 = Circle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;15.0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The area of the circle is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; metres&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, circle1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;area&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;	println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The diameter of the circle is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; metres&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, circle1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;diameter&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;	println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The circumference of the circle is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; metres&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, circle1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;circumference&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We need the constant pi, which is available to us in Rust’s standard library, so we pull this in as a dependency with a use statement. Next, we declare a typle struct called Circle. This tuple struct contains one value, a 32-bit floating-point number which represents the radius. Next, we get to the meat of the matter. Structs can have methods defined for them, which allow you to write code to do something with the struct. Methods are started with the impl keyword, followed by a name which must match the name of the struct. Inside the curly braces, we define one or more functions which comprise our “implementation block” for the Circle struct. Everything inside this block is associated with the Circle struct.&lt;&#x2F;p&gt;
&lt;p&gt;The first function, called area, takes a reference to the struct itself as a parameter (still haven’t talked about references and borrowing yet…I will get there, I promise) and returns the area of the circle. The equation I gave above for area is used. To access the radius value contained within our struct, we use self.0 to reference it. It’s important to note that Methods must take self as their first parameter. The can have other parameters, but self is always the first.&lt;&#x2F;p&gt;
&lt;p&gt;The diameter and circumference functions perform a similar task, taking the radius provided as part of the struct, using the equations I noted earlier, and returning the diameter and circumference.&lt;&#x2F;p&gt;
&lt;p&gt;The main function ends up being very lean, given we’ve implemented most of the program through the methods on the Circle struct. We declare an instance of our Circle struct, called circle1, and give it a radius value of 15.0 metres. Then, we calculate and output our results by calling, in turn, each of the methods we created. Methods are called by simply appending the method’s name to the struct variable, using dot notation.&lt;&#x2F;p&gt;
&lt;p&gt;The output from this program will be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;The area of the circle is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;706.5&lt;&#x2F;span&gt;&lt;span&gt; metres
&lt;&#x2F;span&gt;&lt;span&gt;The diameter of the circle is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt; metres
&lt;&#x2F;span&gt;&lt;span&gt;The circumference of the circle is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;94.2&lt;&#x2F;span&gt;&lt;span&gt; metres
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’ll leave you to embellish this program with things like user input, maybe from command line arguments using the clap crate or whatever other way you choose. You could also fancy up the output if you like.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;I’ve presented the method syntax to you with a simple, practical example. Methods are a means of providing encapsulation and organization to your Rust programs. They enable the selective exposure of functionality to users as well as other parts of the program. Everything related to Circles is in one place, making it straightforward to know how to interact with the program.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch05-03-method-syntax.html&quot;&gt;The Rust Programming Language, Chapter 5.3, Method Syntax&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Bigger Building Blocks: Structs Reloaded</title>
        <published>2022-06-11T00:00:00+00:00</published>
        <updated>2022-06-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2022/2022-06-11-bigger-building-blocks-structs-reloaded/"/>
        <id>https://jeff-mitchell.dev/blog/2022/2022-06-11-bigger-building-blocks-structs-reloaded/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2022/2022-06-11-bigger-building-blocks-structs-reloaded/">&lt;p&gt;In a previous article, I introduced you to structs in Rust. Structs are flexible data structures that allow the grouping of fields together under one roof. Structs have a lot of capability. Let’s take a look at the things I didn’t cover last time out.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-field-init-shorthand&quot;&gt;The Field Init Shorthand&lt;&#x2F;h3&gt;
&lt;p&gt;The fields of a struct can be initialized quickly by using the field init shorthand. Let’s see this through an example.&lt;&#x2F;p&gt;
&lt;p&gt;We’ll start by defining a struct to hold information about photos. Our struct will contain fields for an identifier, the date the photo was taken, the time the photo was taken, and the location the photo was taken:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Photo {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;location&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, we build a function that’s used to create and return our Photo struct with information in its fields:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;build_photo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span&gt;: String) -&amp;gt; Photo {
&lt;&#x2F;span&gt;&lt;span&gt;	Photo {
&lt;&#x2F;span&gt;&lt;span&gt;		id,
&lt;&#x2F;span&gt;&lt;span&gt;		date,
&lt;&#x2F;span&gt;&lt;span&gt;		time: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1.00pm&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;		location: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Boundary Bay, Vancouver, BC&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This function fills in the id and date fields of the Photo struct by using the id and date parameters received from the function. Because the struct fields have the same names as the incoming parameters of the function, they are automatically populated. We choose to initialize the other two fields manually, but there’s no reason why the function couldn’t have as many parameters as the struct fields. In this case, all of them would be automatically initialized.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-update-syntax&quot;&gt;The Update Syntax&lt;&#x2F;h3&gt;
&lt;p&gt;It’s frequently useful to create an instance of a struct by copying data from another one. There’s a nice shorthand to achieve this, called the struct update syntax.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;	let photo2 = Photo {
&lt;&#x2F;span&gt;&lt;span&gt;		date: &amp;quot;2022 06 05&amp;quot;.to_owned(),
&lt;&#x2F;span&gt;&lt;span&gt;		..photo1
&lt;&#x2F;span&gt;&lt;span&gt;	};
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this snip, we’re declaring a new variable called photo2, and then initializing it with all the fields from a previously declared photo1 variable, but changing the date field to have new data.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tuple-structs-without-named-fields&quot;&gt;Tuple Structs without Named Fields&lt;&#x2F;h3&gt;
&lt;p&gt;Structs don’t necessarily need their fields spelled out. We can combine them with the tuple data structure. Let’s say we need to represent a position in space. This can be done with three coordinates, typically noted as x, y, and z.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Coordinates(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, we declare a tuple struct that contains three integers to represent our x, y, and z coordinates. This struct can then be used to contain position data, like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;	let position1 = Coordinates(0, 1, 5);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The data inside tuple structs can be accessed using dot notation and the positions of the particular fields. Our Coordinates struct has three fields, so you could do this to access the individual data points:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x = position1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; y = position1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; z = position1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Tuple structs are best for containing small quantities of fields where it’s easy to remember their purpose. If you need more than say two or three fields, it’s probably better to use a struct with named fields.&lt;&#x2F;p&gt;
&lt;p&gt;Tuple structs form their own type, even though the fields within two tuple structs might be the same. You can’t mix and match two different tuple structs together.&lt;&#x2F;p&gt;
&lt;p&gt;Unit Structs with No Fields
Structs do not need to contain data. They can be made into “unit structs”. Rust has a concept known as the “unit type”, which is denoted by round brackets with nothing inside, (). Let’s take a look at the example used in the Rust Book:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;AlwaysEqual;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; subject = AlwaysEqual;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We declare our struct using the name AlwaysEqual. There’s no need to explicitly write empty brackets, we can just terminate our declaration with a semicolon. Then, in our main function, we declare an instance of our AlwaysEqual type by binding it to a variable named subject.&lt;&#x2F;p&gt;
&lt;p&gt;Structs created in this manner are most useful when creating Traits, which will come in a future article. Traits are a way of defining common behaviour and are a powerful piece of the Rust puzzle.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;To recap, in this article I’ve shown you the remaining concepts that make structs an important part of the Rust language. I’ve covered shortcuts for initializing data and updating the information within a struct. I’ve also covered the notion of tuple structs, useful for small amounts of data where named fields aren’t a necessity. Lastly, I touched on the notion of unit structs that have no data but instead can be used to represent a type.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch05-01-defining-structs.html&quot;&gt;Chapter 5.2, Defining and Instantiating Structs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Bigger Building Blocks: Intro to Enumerations</title>
        <published>2022-05-21T00:00:00+00:00</published>
        <updated>2022-05-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2022/2022-05-21-bigger-building-blocks-intro-to-enumerations/"/>
        <id>https://jeff-mitchell.dev/blog/2022/2022-05-21-bigger-building-blocks-intro-to-enumerations/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2022/2022-05-21-bigger-building-blocks-intro-to-enumerations/">&lt;p&gt;Today I will cover the very basics of Rust’s enum type. Enums are a pillar of the language.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-is-an-enumeration&quot;&gt;What is an Enumeration?&lt;&#x2F;h3&gt;
&lt;p&gt;An enumeration, or enum, is a type of data structure useful for enumerating possible variants of something. In addition, enums can optionally contain data. Enums are best to describe variations of one particular thing. They differ from structs, as structs can contain multiple things all grouped under one category.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-do-i-create-an-enumeration&quot;&gt;How Do I Create an Enumeration?&lt;&#x2F;h3&gt;
&lt;p&gt;Let’s say we needed a data structure to define several possible variants of peppers. We can do it with an enum:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;Pepper {
&lt;&#x2F;span&gt;&lt;span&gt;	Bell,
&lt;&#x2F;span&gt;&lt;span&gt;	Banana,
&lt;&#x2F;span&gt;&lt;span&gt;	Pimento,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’ve now defined a custom type that can be used throughout the rest of a program.&lt;&#x2F;p&gt;
&lt;p&gt;Enums can also contain data. Data can be attached directly, without the need for another data structure. We can embody some data about spiciness, by adding the Scoville Heat Unit rating, right into the enum variants, like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;Pepper {
&lt;&#x2F;span&gt;&lt;span&gt;	Bell(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;	Habanero(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We’ve added an integer data type with each of our peppers so that we can later add in a Scoville Heat Unit value. Each element in an enum can be assigned different quantities and types of data. There is no limitation on the number of variations an enum can contain. I’ve kept it simple for the purposes of this article.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-do-i-use-an-enumeration&quot;&gt;How Do I Use an Enumeration?&lt;&#x2F;h3&gt;
&lt;p&gt;Let’s see how we can use our Pepper enum.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sweet = Pepper::Bell(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; spicy = Pepper::Habanero(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, we declare two variables, sweet and spicy, and assign them the types we declared in our Pepper enum. We also assign an integer to embody the Scoville Heat Unit rating.&lt;&#x2F;p&gt;
&lt;p&gt;To access the data contained in our Pepper enums, we have to use the match keyword. I’ve not introduced match yet in my writing, so consider this the first glimpse. I will write more in-depth on it in a future article.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;Pepper {
&lt;&#x2F;span&gt;&lt;span&gt;     Bell(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;     Habanero(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sweet = Pepper::Bell(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; spicy = Pepper::Habanero(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; sweet {
&lt;&#x2F;span&gt;&lt;span&gt;		Pepper::Bell(shu) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;			println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The Scoville Heat Unit rating of the bell pepper is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, shu);
&lt;&#x2F;span&gt;&lt;span&gt;		},
&lt;&#x2F;span&gt;&lt;span&gt;		_ =&amp;gt; ()
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; spicy {
&lt;&#x2F;span&gt;&lt;span&gt;		Pepper::Habanero(shu) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;			println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The Scoville Heat Unit rating of the habanero pepper is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, shu);
&lt;&#x2F;span&gt;&lt;span&gt;		},
&lt;&#x2F;span&gt;&lt;span&gt;		_ =&amp;gt; ()
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This program will result in the following output to the terminal:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;The Scoville Heat Unit rating of the bell pepper is: 0
&lt;&#x2F;span&gt;&lt;span&gt;The Scoville Heat Unit rating of the habanero pepper is: 100000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The match keyword in Rust can be used as a sort of flow control, evaluating all possible options of an enum and providing a custom code path to execute for each one. It’s important, when writing match expressions, that ALL possible variants of an enum must be accounted for. If you don’t, you’ll get a compiler error.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s break down what we did above.&lt;&#x2F;p&gt;
&lt;p&gt;We create a match expression first for the sweet pepper variable we declared earlier. We access the data inside the bell pepper variant by declaring a new variable called shu, to represent the Scoville Heat Unit. The first “arm” of our match will result in the output of a simple statement printed to the console, including the value of the Scoville Heat Unit rating. The second, empty match arm is needed because the enum might not contain a value. Remember that all possible variations must be accounted for. In this case, we simply want to do nothing, hence the use of the unit type (), which returns nothing but satisfies the need to deal with all possible variants. In this made-up code sample, our Pepper enum always contains a value, so after execution of our first match arm, code execution continues on to the spicy pepper case.&lt;&#x2F;p&gt;
&lt;p&gt;We write a second match expression, structured similarly, for our spicy pepper, which outputs its Scoville Heat Unit rating.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;I’ve shown you the very bare bones of Rust’s enum structure, which is useful to create custom data types. Enum’s can optionally contain data, increasing their flexibility. The match keyword is used to access internal data within an enum and use it or take other action based on the internal data. Enums are a core part of the powerful type system in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;There are two special versions of the enum type, Option and Result, which contribute to Rust’s robust error handling ability. I will cover these in a future article.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch06-01-defining-an-enum.html&quot;&gt;The Rust Programming Language, Chapter 6.1.Defining an Enum&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Bigger Building Blocks: Intro to Structs</title>
        <published>2022-05-11T00:00:00+00:00</published>
        <updated>2022-05-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2022/2022-05-11-bigger-building-blocks-intro-to-structs/"/>
        <id>https://jeff-mitchell.dev/blog/2022/2022-05-11-bigger-building-blocks-intro-to-structs/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2022/2022-05-11-bigger-building-blocks-intro-to-structs/">&lt;p&gt;I’m roughly following the order of The Rust Book in my writings, but I intend on deviating a little. The next topic is ownership and borrowing, but I don’t feel like I’m quite able to write about those two things coherently yet. Instead, I will write about the first of Rust’s bigger building blocks — structs.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-is-a-struct&quot;&gt;What is a Struct?&lt;&#x2F;h3&gt;
&lt;p&gt;A struct is a flexible data structure that allows creation of different data fields within one group. Structs are similar to tuples but more flexible. Each data field is named and can be accessed directly. There is no need to rely on the order of the data in a struct. Named fields serve to make it more clear the overall purpose and details embodied by the struct.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-do-i-construct-a-struct&quot;&gt;How Do I Construct a Struct?&lt;&#x2F;h3&gt;
&lt;p&gt;Let’s look at how we construct a struct (see what I did there…):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;struct Album {
&lt;&#x2F;span&gt;&lt;span&gt;	id: u32,
&lt;&#x2F;span&gt;&lt;span&gt;	genre: String,
&lt;&#x2F;span&gt;&lt;span&gt;	artist: String,
&lt;&#x2F;span&gt;&lt;span&gt;	name: String,
&lt;&#x2F;span&gt;&lt;span&gt;	release_date: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We create a struct by using the struct keyword immediately followed by a name. Convention is to make struct names capitalized. We then surround the individual fields with curly braces. The fields of the struct are created with key: value pairs separated by commas. The example here contains predominately string types, with a lone 32 bit unsigned integer. Struct fields can be of any type.&lt;&#x2F;p&gt;
&lt;p&gt;I will highlight one side topic here. The majority of the fields in our struct are Strings, in this case we’ve made them owned strings, meaning our struct will have ownership of all its data. More on ownership will come in a future article.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-do-i-use-a-struct&quot;&gt;How Do I Use a Struct?&lt;&#x2F;h3&gt;
&lt;p&gt;It’s important to remember that all we’ve done so far is create the template for a struct. The template has a name, Album, as well as several empty fields. This is a blueprint, if you will, of our data structure. To actually make it useful, we have to add flesh the bones.&lt;&#x2F;p&gt;
&lt;p&gt;We do that like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;	let album1 = Album {
&lt;&#x2F;span&gt;&lt;span&gt;		id: 1,
&lt;&#x2F;span&gt;&lt;span&gt;		genre: String::from(&amp;quot;Heavy Metal&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;		artist: String::from(&amp;quot;Iron Maiden&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;		name: String::from(&amp;quot;Senjutsu&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;		release_date: String::from(&amp;quot;September 3, 2021&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;	};
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let’s unpack this.&lt;&#x2F;p&gt;
&lt;p&gt;We’ve started our program (with the main function) and immediately declare a variable called album1. This variable is our first “instance” of our Album struct. Inside the curly braces we assign specific values to the data fields that are unique to the album1 variable.&lt;&#x2F;p&gt;
&lt;p&gt;It’s important to note that, as declared in this example, the fields cannot be modified. To modify one or more of them the mut keyword is needed as part of the variable declaration.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;	let mut album1 = Album {
&lt;&#x2F;span&gt;&lt;span&gt;		id: 1,
&lt;&#x2F;span&gt;&lt;span&gt;		genre: String::from(&amp;quot;Heavy Metal&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;		artist: String::from(&amp;quot;Iron Maiden&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;		name: String::from(&amp;quot;Senjutsu&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;		release_date: String::from(&amp;quot;September 3, 2021&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;	};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	album1.name = String::from(&amp;quot;The Book of Souls&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	album1.release_date: String::from(&amp;quot;September 4, 2015&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This change now lets us re-assign values to the fields of the struct, as illustrated by the reassignment of two of the fields immediately after the variable declaration.&lt;&#x2F;p&gt;
&lt;p&gt;How do we access the fields inside a struct?&lt;&#x2F;p&gt;
&lt;p&gt;Like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;println!(&amp;quot;The name of album1 is: {}&amp;quot;, album1.name);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We call the name of the struct variable, then use dot notation and append the name of the field we want to work with. In this case, we’re outputting the album1 name field to the console using the println! macro.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;Structs are a powerful and often used data structure in Rust. They are a core part of the type system that makes Rust so flexible. In this article I’ve shown you how to create, populate, and use fields inside a struct. There are more things to talk about for structs, but I’ll save those for a future “advanced” article.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch05-01-defining-structs.html&quot;&gt;The Rust Programming Language, Defining and Instantiating Structs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Building Something - Saying Hello</title>
        <published>2022-05-06T00:00:00+00:00</published>
        <updated>2022-05-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2022/2022-05-04-building-something-saying-hello/"/>
        <id>https://jeff-mitchell.dev/blog/2022/2022-05-04-building-something-saying-hello/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2022/2022-05-04-building-something-saying-hello/">&lt;p&gt;I’ve covered what I consider the core concepts of the Rust language, namely:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;constants&lt;&#x2F;li&gt;
&lt;li&gt;comments, variables, mutability and shadowing&lt;&#x2F;li&gt;
&lt;li&gt;simple data types&lt;&#x2F;li&gt;
&lt;li&gt;compound data types&lt;&#x2F;li&gt;
&lt;li&gt;functions&lt;&#x2F;li&gt;
&lt;li&gt;decision making&lt;&#x2F;li&gt;
&lt;li&gt;flow control&lt;&#x2F;li&gt;
&lt;li&gt;From this core, useful things can arise. Let’s build something.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In my Let the Journey Begin piece, I showed you how to create the classic coding journey starting point, a hello world program. That little grain of salt didn’t take any user input. We shall write a program which asks for your name and then prints to the console a simple greeting.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s what the output will be:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;What is your name? Jeff
&lt;&#x2F;span&gt;&lt;span&gt;Hello, Jeff, nice to meet you!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are a few important concepts that will bubble up from this simple example. You’ll learn how to use Rust’s standard library as well as how to “sanitize” or clean up input received from a user. We’ll also take the opportunity to incorporate modularity by breaking the program up into distinct parts, each with a specific purpose.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;&#x2F;h3&gt;
&lt;p&gt;The “Hello, World” program is the first program you learn to write in many languages but doesn’t typically involve any input. Create a program that prompts for your name and prints a greeting using your name.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;constraints&quot;&gt;Constraints&lt;&#x2F;h3&gt;
&lt;p&gt;We’ll impose some constraints on our solution and exercise the principle of “separation of concerns” to make our program modular. We’ll structure our program into separate functions to keep the input, string building, and output jobs separate.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;walkthrough&quot;&gt;Walkthrough&lt;&#x2F;h3&gt;
&lt;p&gt;I’m terrible for just jumping in and coding, without solving the problem or outlining my program structure. I vow to help you be better. Let’s think for a minute about what we need to do.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ask for the user’s name&lt;&#x2F;li&gt;
&lt;li&gt;“sanitize” the user’s input, as it will contain white space (a carriage return) that will affect our output format&lt;&#x2F;li&gt;
&lt;li&gt;build the greeting string from three parts, including the input received&lt;&#x2F;li&gt;
&lt;li&gt;output the result&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;em&gt;Function to get the name&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn get_name() -&amp;gt; String {
&lt;&#x2F;span&gt;&lt;span&gt;     print!(&amp;quot;What is your name? &amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;     io::stdout().flush().unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;     let mut buffer = String::new();
&lt;&#x2F;span&gt;&lt;span&gt;     io::stdin().read_line(&amp;amp;mut buffer).unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;     buffer
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;First up is our get_name function. It doesn’t need to take any parameters and must return a string to the next part of our program. We use the print! macro to output the text “What is your name?” and then wait for input. We haven’t used println! because we don’t want a carriage return. We need to pose the question, then wait for the user to type it all on the same line.&lt;&#x2F;p&gt;
&lt;p&gt;Next, we declare a variable named buffer, which is made mutable so that we can receive the input and store it. We take the user’s typed name, store it in our mutable buffer variable, and then the function ends and we return the name as a string.&lt;&#x2F;p&gt;
&lt;p&gt;You’ll notice the .unwrap() method. I’ve not explained this yet, but will in the future. There’s a good preview here at &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rust-by-example&#x2F;error&#x2F;option_unwrap.html&quot;&gt;Rust by Example&lt;&#x2F;a&gt;. The read_line method might fail, in that it might not return a result. The use of .unwrap() says we’ll ignore the possible error and assume we get the result we need. The program will panic and crash if we don’t get the name as an input.&lt;&#x2F;p&gt;
&lt;p&gt;There is a concept glossed over. The use of the print! macro carries with it the need to force out our text of the request to enter your name, as it may not be emitted immediately. We use the .flush() method on io::stdout() to achieve this. Similar to the use of the read_line method, we .unwrap() the result and ignore the potential for errors.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Function to build the greeting message&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn build_greeting(name: String) -&amp;gt; String {
&lt;&#x2F;span&gt;&lt;span&gt;     let mut greeting = &amp;quot;Hello, &amp;quot;.to_owned();
&lt;&#x2F;span&gt;&lt;span&gt;     greeting.push_str(name.trim());
&lt;&#x2F;span&gt;&lt;span&gt;     greeting.push_str(&amp;quot;, nice to meet you!&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;     greeting
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the build_greeting function, the main work happens. This function needs a parameter, namely the name string we just received from the get_name function. A string (the complete greeting) will be returned. We declare a mutable variable (an owned string…haven’t talked about what ownership means yet, but it’s coming soon). We use the push_str method to append our name variable and we use the trim() method to trim off any carriage returns received as part of the name variable. This action serves to “sanitize” the user input. Then, we append the last part of the greeting, once again using the push_str method. Finally, we return the completed greeting.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Function to print the greeting to the console&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn print_greeting(greeting: String) {
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;{}&amp;quot;, greeting);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our final function, print_greeting, receives our greeting string as a parameter and uses the println! macro to output it to the console.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;final-code&quot;&gt;Final Code&lt;&#x2F;h3&gt;
&lt;p&gt;Let’s put it all together.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;use std::io::{self, Write};
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; function that retrieves user input
&lt;&#x2F;span&gt;&lt;span&gt;fn get_name() -&amp;gt; String {
&lt;&#x2F;span&gt;&lt;span&gt;     print!(&amp;quot;What is your name? &amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;     io::stdout().flush().unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;     let mut buffer = String::new();
&lt;&#x2F;span&gt;&lt;span&gt;     io::stdin().read_line(&amp;amp;mut buffer).unwrap();
&lt;&#x2F;span&gt;&lt;span&gt;     buffer
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; function that builds the output string
&lt;&#x2F;span&gt;&lt;span&gt;fn build_greeting(name: String) -&amp;gt; String {
&lt;&#x2F;span&gt;&lt;span&gt;     let mut greeting = &amp;quot;Hello, &amp;quot;.to_owned();
&lt;&#x2F;span&gt;&lt;span&gt;     greeting.push_str(name.trim());
&lt;&#x2F;span&gt;&lt;span&gt;     greeting.push_str(&amp;quot;, nice to meet you!&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;     greeting
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; function that displays the output string
&lt;&#x2F;span&gt;&lt;span&gt;fn print_greeting(greeting: String) {
&lt;&#x2F;span&gt;&lt;span&gt;     println!(&amp;quot;{}&amp;quot;, greeting);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; main program
&lt;&#x2F;span&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;     print_greeting(build_greeting(get_name()));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The very beginning of our program has a use statement. We need to use some things from Rust’s standard library (stdin and stdout, along with their associated methods), to aid in getting our input, and we need to bring them “into scope” so that our program can find and use them.&lt;&#x2F;p&gt;
&lt;p&gt;The main function calls the three functions in a nested fashion, with the result being our greeting to the user. In this nested function call, it’s important to remember that the get_name function returns the name, which serves as the parameter that the build_greeting function needs. Lastly, the greeting string returned from build_greeting serves as the parameter that print_greeting needs to print the greeting.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;I’ve shown you a step-by-step methodology for creating a program which asks for user input in the form of your name, builds a greeting using by combining the name with a pre-built string, and outputs the result to the console. This program is simple but surfaces several subtleties that are useful going forward and act as building blocks to the creation of bigger and better things. It’s critical to imagine the flow of data through your program and the act of working through a problem with a simple solution helps sharpen your ability.&lt;&#x2F;p&gt;
&lt;p&gt;GitHub Repo&lt;&#x2F;p&gt;
&lt;p&gt;I’ve put the code into a GitHub repo, you can access it here:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sentinel1909&#x2F;57-exercises&quot;&gt;57-exercises: Say-Hello&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;References&lt;&#x2F;p&gt;
&lt;p&gt;Exercises for Programmers: 57 Exercises to Challenge your Programming Skills, by Brian P. Hogan&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;web.mit.edu&#x2F;rust-lang_v1.25&#x2F;arch&#x2F;amd64_ubuntu1404&#x2F;share&#x2F;doc&#x2F;rust&#x2F;html&#x2F;std&#x2F;io&#x2F;index.html&quot;&gt;The Rust Standard Library: std::io&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Controlling the Flow</title>
        <published>2022-05-01T00:00:00+00:00</published>
        <updated>2022-05-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2022/2022-05-01-controlling-the-flow/"/>
        <id>https://jeff-mitchell.dev/blog/2022/2022-05-01-controlling-the-flow/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2022/2022-05-01-controlling-the-flow/">&lt;p&gt;Last time, in &lt;a href=&quot;https:&#x2F;&#x2F;jeff-mitchell.dev&#x2F;blog&#x2F;2022&#x2F;2022-04-27-decisions-decisions&#x2F;&quot;&gt;Decisions, Decisions&lt;&#x2F;a&gt;, we looked at a method for adding logic within a program, via the if and if else expressions. Next up, we see how we can further control the flow, through loops. Loops allow repetition of blocks of code until some desired event or outcome. There are three kinds of loops in Rust: loop, while, and for.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;loop&quot;&gt;loop&lt;&#x2F;h3&gt;
&lt;p&gt;The loop keyword tells Rust to execute the same block of code over, and over, and over again, until told specifically to stop. Here’s a basic example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;	loop {
&lt;&#x2F;span&gt;&lt;span&gt;		println!(&amp;quot;Help, I&amp;#39;m stuck in a loop!&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This program will endlessly print out the message, “Help, I’m stuck in a loop!”, over and over to the console until you hit the control-C key combo to break out. This is not particularly elegant or useful. Luckily, you can control how long you stay in the loop.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s another example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;	let mut count = 10;
&lt;&#x2F;span&gt;&lt;span&gt;	loop {
&lt;&#x2F;span&gt;&lt;span&gt;		println!(&amp;quot;Ok, in a loop, but will get out once the count reaches {}&amp;quot;, count);
&lt;&#x2F;span&gt;&lt;span&gt;			count -= 1;
&lt;&#x2F;span&gt;&lt;span&gt;			if count &amp;lt; 0 {
&lt;&#x2F;span&gt;&lt;span&gt;				println!(&amp;quot;Yay, I&amp;#39;m saved!&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;				break;
&lt;&#x2F;span&gt;&lt;span&gt;			}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We declare a counter variable and bind the starting value of 10 to it. Then, we enter a loop. In the loop, we iterate through the following steps:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;print a message about being stuck in a loop&lt;&#x2F;li&gt;
&lt;li&gt;decrease the counter value by one&lt;&#x2F;li&gt;
&lt;li&gt;check if the counter is less than zero, if it is, we print one final message then break out of the loop, terminating the program&lt;&#x2F;li&gt;
&lt;li&gt;if the counter is not less than zero, around we go again&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Values can be returned out of loops. This is useful in the case where you might be computing something, then need to return the value out to the rest of the program. When doing this, the loop can be assigned to a variable, which will hold the result computed from the loop. Here’s an example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;	let mut counter = 0;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	let result = loop {
&lt;&#x2F;span&gt;&lt;span&gt;		counter += 1;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		if counter == 10 {
&lt;&#x2F;span&gt;&lt;span&gt;			break counter * 2;
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	println!(&amp;quot;The result is {}&amp;quot;, result);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, you can see that we’ve added the final result of the counter variable to the break keyword, then bound the whole loop structure to the variable result.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;while&quot;&gt;while&lt;&#x2F;h3&gt;
&lt;p&gt;Frequently, we need to repeat an action while a certain condition is true. Without any other methods, we could do this with a combination of the loop we just learned about, along with if, else, and break, however, this is cumbersome. Rust has the while loop for us.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s an example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;	let mut number = 10;
&lt;&#x2F;span&gt;&lt;span&gt;	while number != 0 {
&lt;&#x2F;span&gt;&lt;span&gt;		println!(&amp;quot;Counting down...{}!&amp;quot;, number);
&lt;&#x2F;span&gt;&lt;span&gt;		number -= 1;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	println!(&amp;quot;Liftoff!!!&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We declare a variable named number and bind the value 10 to it, when we enter the while loop, checking that number is not equal to 0. We print a message with the value of number, decreasing it by 1 on each pass through the loop. Eventually, we reach 0 and the final message is output.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;for&quot;&gt;for&lt;&#x2F;h3&gt;
&lt;p&gt;The last basic loop structure is a for loop. In a for loop, execution happens for as many times as you specify. Any other decision logic you have to add yourself. The for loop will execute the specified number of times, in absence of anything else.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s say we have a couple of arrays and we need to print out all the elements within each. We can do that with a for loop.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;	let array_one = [40, 80, 120];
&lt;&#x2F;span&gt;&lt;span&gt;	let array_two = [30, 70, 110];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	for array_item in array_one {
&lt;&#x2F;span&gt;&lt;span&gt;		println!(&amp;quot;the value is: {}&amp;quot;, array_item);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	for array_item in array_two {
&lt;&#x2F;span&gt;&lt;span&gt;		println!(&amp;quot;the value is: {}&amp;quot;, array_item);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will loop through the individual entries in each array, and print the entries to the console.&lt;&#x2F;p&gt;
&lt;p&gt;A handy thing to do with for loops is to pull in Range from the standard library AND use the rev method available on Range to countdown. Let’s do another countdown using this technique:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;	for number in (1..10).rev() {
&lt;&#x2F;span&gt;&lt;span&gt;		println!(&amp;quot;{}!&amp;quot;, number);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	println!(&amp;quot;We have liftoff!!!&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is quite elegant.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;These loops, when combined with decision logic such as if and else if, allow programs to have a more sophisticated execution order and be more flexible to internal and external input. These basic building blocks form the basis of all you do with Rust going forward. When combined with Rust’s more advanced features and data structures, you’re able to create truly useful software. My writings up to this point have covered the very basic programming concepts included in Rust. Before I move on to the more advanced territory from the Rust Book, in my next article I’ll demonstrate building something simple with all that I’ve written about so far. Stay tuned!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch03-05-control-flow.html&quot;&gt;The Rust Programming Language, Chapter 3.5&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Decisions Decisions</title>
        <published>2022-04-27T00:00:00+00:00</published>
        <updated>2022-04-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2022/2022-04-27-decisions-decisions/"/>
        <id>https://jeff-mitchell.dev/blog/2022/2022-04-27-decisions-decisions/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2022/2022-04-27-decisions-decisions/">&lt;p&gt;Software capability would be very limited if there were no ability to make decisions and follow different logic paths. The ability to branch and provide different outcomes, based on either internal results or external user input, is essential. Rust provides basic decision logic in the form of the if and else if expressions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-if-expression&quot;&gt;The if Expression&lt;&#x2F;h3&gt;
&lt;p&gt;An if expression starts with the if keyword and is followed by a condition. Immediately after the condition is a block of code, surrounded by curly braces, which is executed if the condition proves true. If the condition is not true, the code after the condition is skipped entirely and execution flows to the next statement.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s see an example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;     let year = 1984;
&lt;&#x2F;span&gt;&lt;span&gt;     if year &amp;gt; 2000 {
&lt;&#x2F;span&gt;&lt;span&gt;     println!(“The year is: {}”, year);
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We first declare a variable named year and bind to it the integer 1984. Next, we start the if expression. The condition checks that the value bound to the year variable is greater than 2000. In this instance, it is not, so the code in the curly braces is ignored and the program ends. Nothing is output.&lt;&#x2F;p&gt;
&lt;p&gt;If the condition was true, then the code within the curly braces would execute and we’d see the message “The years is: 1984” output to the console.&lt;&#x2F;p&gt;
&lt;p&gt;Conditions can be chained with operators like or || and &amp;amp;&amp;amp;. This provides the ability to make decisions with more complex criteria.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;     let year = 2022;
&lt;&#x2F;span&gt;&lt;span&gt;     if year &amp;gt; 2000 &amp;amp;&amp;amp; year &amp;lt; 2025 {
&lt;&#x2F;span&gt;&lt;span&gt;     println!(“The year is: {}”, year);
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The condition in this code will evaluate true if the year is greater than 2000 and less than 2025. Our year variable has a value of 2022, which satisfies both conditions. The code block after the condition will execute and the message “The year is: 2022” will output to the console.&lt;&#x2F;p&gt;
&lt;p&gt;When the condition after an if statement is not satisfied, code execution jumps to whatever comes after the if expression. An optional else expression can be added to provide another pathway for code to follow. The code preceding the else statement will execute only when the condition evaluates to false.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;    let number = 26;
&lt;&#x2F;span&gt;&lt;span&gt;     if number &amp;gt; 30 {
&lt;&#x2F;span&gt;&lt;span&gt;     println!(“{} is greater than 30”, number);
&lt;&#x2F;span&gt;&lt;span&gt;     } else {
&lt;&#x2F;span&gt;&lt;span&gt;          println!(“{} is less than 30”, number);
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, we declare a variable named number and bind to it the value 26. We check if the value assigned to number is greater than 30. In this case, it is not, so execution transfers to the else expression and the code within the curly brackets preceding it is executed. The message “26 is less than 30” is printed to the console.&lt;&#x2F;p&gt;
&lt;p&gt;If the variable year contained a value that was greater than 30, the code preceding the condition is executed instead, resulting in a different message being output to the console. In this case, the else expression would be skipped and code flow would proceed to whatever comes after.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-else-if-expression&quot;&gt;The else…if Expression&lt;&#x2F;h3&gt;
&lt;p&gt;If there is a need to check multiple conditions, the else if expression is available. Let’s take the example given in Chapter 3.5 of The Rust Programming Language, as it illustrates an important nuance.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;     let number = 6;
&lt;&#x2F;span&gt;&lt;span&gt;     if number % 4 == 0 {
&lt;&#x2F;span&gt;&lt;span&gt;          println!(“number is divisible by 4”);
&lt;&#x2F;span&gt;&lt;span&gt;     } else if number % 3 == 0 {
&lt;&#x2F;span&gt;&lt;span&gt;          println!(“number is divisible by 3”);
&lt;&#x2F;span&gt;&lt;span&gt;     } else if number % 2 == 0 {
&lt;&#x2F;span&gt;&lt;span&gt;          println!(“number is divisible by 2”);
&lt;&#x2F;span&gt;&lt;span&gt;     } else {
&lt;&#x2F;span&gt;&lt;span&gt;          println!(“number is not divisible by 4, 3, or 2”);
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We bind the integer 6 to the variable named number. We then have a list of conditions to check. Rust will execute the first block of code for which a condition is satisfied, which in this case is the first else expression. The number six is evenly divisible by 3, so the message “number is divisible by 3” is output to the console. Even though some of the other conditions in the series may be true, it doesn’t matter. Only the first true one is executed, all the other possibilities are ignored.&lt;&#x2F;p&gt;
&lt;p&gt;Nested if else if expressions can get out of hand very quickly resulting in messy code that’s hard to reason through. Rust has a more advanced option, the match statement, which is very powerful. I’ll explore it in future writings.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;using-if-in-a-let-statement&quot;&gt;Using if in a let Statement&lt;&#x2F;h3&gt;
&lt;p&gt;Given if is an expression, it can form part of a let statement and be used to assign variables. Again, an example from The Rust Programming language is useful.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;     let condition = true;
&lt;&#x2F;span&gt;&lt;span&gt;     let number = if condition { 5 } else { 6 };
&lt;&#x2F;span&gt;&lt;span&gt;     println!(“The value of number is: {}”, number);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, we bind the boolean value true to a variable named condition. Next, the integer 5 is bound to the variable number. This happens because the variable condition is true. An if statement, fundamentally, is checking whether something is true, then executing code after. The else part of the expression is ignored. If the condition was false instead of true, the integer 6 would be bound to number.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;I’ve shown you Rust’s most basic tools for coding decision-making. The combination of if, else, and else if provide the ability for different code paths to execute, thus varying the output as needed based on internal conditions or a combination of internal conditions and external input.&lt;&#x2F;p&gt;
&lt;p&gt;References&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch03-05-control-flow.html&quot;&gt;The Rust Programming Language, Chapter 3.5&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Pillars</title>
        <published>2022-04-23T00:00:00+00:00</published>
        <updated>2022-04-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2022/2022-04-23-pillars/"/>
        <id>https://jeff-mitchell.dev/blog/2022/2022-04-23-pillars/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2022/2022-04-23-pillars/">&lt;p&gt;There is so much pressure to build and develop faster, faster, faster. The result of the rush is a creation that can’t carry its own weight and buckles under pressure. It’s important to master the pillars of web development. Effort to master the pillars will reward you with skills that stand the test of time as well as creations that users will enjoy.&lt;&#x2F;p&gt;
&lt;p&gt;I’m an engineer and I work in the construction industry. I see many parallels between constructing a building and constructing a website. On my own journey to learn web development, I’ve flitted between shiny frameworks, but have come to see there are four pillars…foundation, structure, form, and power. Not being intimate with each of them puts any skills with a framework on shaky ground.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;foundation-separation-of-concerns&quot;&gt;Foundation — Separation of Concerns&lt;&#x2F;h3&gt;
&lt;p&gt;Every building needs to rest on stable soil, have solid footings, and sound structure to support itself and its occupants. A website is no different. Set up a clean folder structure and have separate files. HTML should be on its own, CSS should be on its own and properly referenced from your HTML files. JavaScript should be on its own and properly reference from your HTML files. Separating things out serves three purposes, it makes code easier to debug and maintain, it makes it understandable by others, and it makes the web site function efficiently. Attention spans are ever shorter, long load times will cause readers to move on to the next thing. The choices made in laying out the site will have a significant impact on performance.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;structure-html&quot;&gt;Structure — HTML&lt;&#x2F;h3&gt;
&lt;p&gt;Solid HTML is the next important piece. HTML is the skeleton, keeping everything upright. It’s the floors and shear walls. If you do it right, your site will function and be useful to someone on an enormous range of devices, some of which may not have a screen. A key point is that HTML should explain what the elements of the site ARE (or should be), not what they should look like…that’s the job of CSS. Spend some time laying out your information and give it good structure. You’ll have a solid fallback.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;form-css&quot;&gt;Form — CSS&lt;&#x2F;h3&gt;
&lt;p&gt;CSS breathes life into the HTML skeleton. Like the exterior envelope of a building, it gives form, colour and shape. Responsive design principles are brought in through CSS. There’s a lot of beauty that can be brought to bear with CSS on its own. Take some time to learn its nuances thoroughly and gain appreciation for its capabilities. Don’t use HTML where you should be leveraging CSS to create the look and feel you want.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;power-javascript&quot;&gt;Power — Javascript&lt;&#x2F;h3&gt;
&lt;p&gt;The addition of some JavaScript gives a site functionality and juices it with power which enables users to get things done. If you’ve setup the structure and form correctly, JavaScript adds spice and that little “something” that puts the site over the top. JavaScript should be used sparingly. Most of the functionality of a site should come from proper design of the layout with HTML and design of styling with CSS.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;There’s a rush today that makes everything frantic and borderline unsustainable. The rush, when applied to web design, can result in products which are difficult to maintain and perform poorly for their intended audience. Take your time, smell the flowers, and make sure your creation has a solid footing with the pillars of web technology.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Let&#x27;s Get Functional</title>
        <published>2022-04-22T00:00:00+00:00</published>
        <updated>2022-04-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2022/2022-04-22-lets-get-functional/"/>
        <id>https://jeff-mitchell.dev/blog/2022/2022-04-22-lets-get-functional/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2022/2022-04-22-lets-get-functional/">&lt;p&gt;In my last Rusty writings, I covered Rust’s &lt;a href=&quot;https:&#x2F;&#x2F;jeff-mitchell.dev&#x2F;blog&#x2F;2022&#x2F;2022-04-18-pouring-the-footings-compound&#x2F;&quot;&gt;compound data types&lt;&#x2F;a&gt;. Today I will write to you about functions. Functions are essential tool to help make code more organized and maintainable.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;purpose&quot;&gt;Purpose&lt;&#x2F;h3&gt;
&lt;p&gt;I’m sure you are familiar with the term spaghetti code, in which your code is a nested mess of twisted logic. Functions are a partial solution to this as they encourage modularity and can make your code base more understandable. Common tasks can be moved to separate blocks of code, then called upon by the main program when needed.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;syntax&quot;&gt;Syntax&lt;&#x2F;h3&gt;
&lt;p&gt;We’re already familiar with one function in Rust, the main function. It serves as the entry point to your program. Every Rust binary program has one.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn main () {
&lt;&#x2F;span&gt;&lt;span&gt;     &#x2F;&#x2F; program logic goes here
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A function is declared with the fn keyword followed by the function name. Immediately after the name are brackets to contain possible parameters. Then, if the function is to return a value, the → syntax is used with a type declaration. Lastly, we have curly braces denoting the beginning of the code block comprising the function.&lt;&#x2F;p&gt;
&lt;p&gt;Functions in Rust uses the so called snake case as the naming convention. The snake case consists of two or more lower case words separated by an underscore.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s try it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn remaining_lyrics() {
&lt;&#x2F;span&gt;&lt;span&gt;     println!(&amp;quot;...give me that which I desire!&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;     println!(&amp;quot;Give me fuel, give me fire...&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;     remaining_lyrics();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Output:
&lt;&#x2F;span&gt;&lt;span&gt;Give me fuel, give me fire...
&lt;&#x2F;span&gt;&lt;span&gt;...give me that which I desire!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What have we done here?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;declared a new function called remaining_lyrics&lt;&#x2F;li&gt;
&lt;li&gt;the function accepts no parameters and doesn’t return anything&lt;&#x2F;li&gt;
&lt;li&gt;the function uses the println! macro to print out a message to the terminal&lt;&#x2F;li&gt;
&lt;li&gt;declared a main function&lt;&#x2F;li&gt;
&lt;li&gt;the main function prints out a message to the terminal&lt;&#x2F;li&gt;
&lt;li&gt;the remaining_lyrics function is called to finish the message&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;One item of note is I’ve declared the function first before the main function. This is just a choice on my part. Historically I’ve always liked declaring my functions first, then having the main function as the very last thing. This is just a personal preference.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;parameters&quot;&gt;Parameters&lt;&#x2F;h3&gt;
&lt;p&gt;Functions can accept values, also known as parameters, on which to do further operations. Parameters are sometimes referred to as arguments. You may see these terms used interchangeably in your coding travels. I will try to be consistent going forward and refer to them as parameters.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s adapt our snippet above to use some parameters:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn remaining_lyrics(band: &amp;amp;str, album: &amp;amp;str, song: &amp;amp;str) {
&lt;&#x2F;span&gt;&lt;span&gt;     println!(&amp;quot;...give me that which I desire! {}, {}&amp;quot;, band, album, song);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;     println!(&amp;quot;Give me fuel, give me fire...&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;     remaining_lyrics(&amp;quot;Metallica&amp;quot;, &amp;quot;Reload&amp;quot;, &amp;quot;Fuel&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Output:
&lt;&#x2F;span&gt;&lt;span&gt;Give me fuel, give me fire...
&lt;&#x2F;span&gt;&lt;span&gt;...give me that which I desire! Metallica, Reload, Fuel
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We’ve now made our remaining_lyrics function accept 3 string slices as parameters. It accepts these string slices when they are passed from the main program by placing them inside brackets right after the function call. The output is the same, but now we have Metallica, Reload, and Fuel printed after the lyrics.&lt;&#x2F;p&gt;
&lt;p&gt;An essential thing about using parameters in functions: the type of the parameter must be annotated to the parameter name. In our little music example, the &amp;amp;str type has been annotated. Failing to annotate the type will result in a compiler error.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;return-values&quot;&gt;Return Values&lt;&#x2F;h3&gt;
&lt;p&gt;Functions can not only receive parameters and process them. Functions can return values back to where they are called from. Let’s make a program which prints a message to tell us the year of release of a very famous album by a favourite band:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn year_released() -&amp;gt; u32 {
&lt;&#x2F;span&gt;&lt;span&gt;    1991
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;     println!(&amp;quot;The Black Album, by Metallica, was released in: {}&amp;quot;,     year_released());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Output:
&lt;&#x2F;span&gt;&lt;span&gt;The Black Album, by Metallica, was released in: 1991
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, the main function prints out a simple message, but calls the function year_released(), which accepts no parameters, and simply returns an integer. This example serves to illustrate an important concept, beyond just the notion of returning a value, the difference between statements and expressions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;expressions-vs-statements&quot;&gt;Expressions vs Statements&lt;&#x2F;h3&gt;
&lt;p&gt;Rust functions are made up of statements and expressions. Statements are instructions that perform some action and do not return a value. An example is the println! statement in the remaining_lyrics function above. It performs the action of printing out a message. Expressions evaluate out to a value. This is what happens in our example above of returning a value. The year_released() function has a single expression which evaluates to an integer.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Statements are terminated with semi-colons.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Expressions are not terminated with semi-colons.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Use of the return keyword at the end of a function is optional in Rust. There are times when it’s beneficial to use the return keyword, such as in the instance of an early return out of a function.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;This article has covered the basics of functions in Rust. It’s shown you the syntax as well as explained the ability of functions to accept optional parameters and return values. Functions are the bread and butter of Rust and provide a means of keeping your code concise, tidy, and maintainable. In my own journey to learn Rust, I’ve found functions relatively easy to understand, as their structure is almost identical to other languages I have familiarity with, namely C and Turbo Pascal (wow, I’m old). I hope you’ve enjoyed this short article on functions. Next up will be decision making and flow control. See you next time!&lt;&#x2F;p&gt;
&lt;p&gt;References&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch03-03-how-functions-work.html&quot;&gt;The Rust Programming Language, Chapter 3.3&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Pouring the Footings: Compound Data Types</title>
        <published>2022-04-18T00:00:00+00:00</published>
        <updated>2022-04-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2022/2022-04-18-pouring-the-footings-compound/"/>
        <id>https://jeff-mitchell.dev/blog/2022/2022-04-18-pouring-the-footings-compound/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2022/2022-04-18-pouring-the-footings-compound/">&lt;p&gt;Selecting a data structure model is a key step in software development. Previously, I showed the very basic single data types in Rust. This article covers compound data types. Compound types can incorporate multiple building blocks in one overall type.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tuples&quot;&gt;Tuples&lt;&#x2F;h3&gt;
&lt;p&gt;A tuple can contain multiple values, each with their own type, into one single entity. Tuples have a fixed length, they cannot grow or shrink later on. Tuples are stored on the stack in memory. Care is needed up front with creation because a tuples size can’t be modified later. You can modify the values inside the tuple, but new values can’t be added to it.&lt;&#x2F;p&gt;
&lt;p&gt;We can declare a tuple like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;let survey_result: (&amp;amp;str, u8, bool) = (&amp;quot;John&amp;quot;, 36, true);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We’ve created a variable name called survey_result and bound a string slice (haven’t talked about strings yet, don’t worry for now), an integer, and a boolean together into a tuple. This variable could represent the data received after submission of a survey form. There are type annotations immediately following the variable name. These are optional. In most cases, Rust can “infer” (figure out) the types needed.&lt;&#x2F;p&gt;
&lt;p&gt;There are a couple of different ways to access the values inside a tuple.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Via Indicies&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Individual values inside a tuple are indexed from 0, 1, 2… similar to arrays or vectors. Values can be accessed with a (.) followed by the value index, like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;    let survey_result: (&amp;amp;str, u8, bool) = (&amp;quot;John&amp;quot;, 36, true);
&lt;&#x2F;span&gt;&lt;span&gt;    let name = survey_result.0;
&lt;&#x2F;span&gt;&lt;span&gt;    let age = survey_result.1;
&lt;&#x2F;span&gt;&lt;span&gt;    let answer = survey_result.2;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;Via Destructuring&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The index method is a little verbose and it can be difficult to track the indicies if the tuple is large. It’s more elegant (and efficient) to use the destructuring method, like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;     let survey_result: (&amp;amp;str, u8, bool) = (&amp;quot;John&amp;quot;, 36, true);
&lt;&#x2F;span&gt;&lt;span&gt;     let (name, age, answer) = survey_result;
&lt;&#x2F;span&gt;&lt;span&gt;     println!(&amp;quot;{}, aged {}, answered {} on the survey form.&amp;quot;, name,    age, answer);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We’ve created the same tuple named survey_result and bound the same three values as the previous example. Next, we bind the individual values within the tuple to three new variables named name, age, and answer. We’ve used the destructuring pattern instead of three separate let statements. Finally, we print out the result to the console.&lt;&#x2F;p&gt;
&lt;p&gt;Tuples are useful for small data structures, but they become unwieldy for more complex needs. The better choice is a struct, which will be the topic of a future article.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;arrays&quot;&gt;Arrays&lt;&#x2F;h3&gt;
&lt;p&gt;The next compound data type is an array. Similar to tuples, arrays are fixed length and cannot grow or shrink. Unlike tuples, arrays can only contain the same type of basic values. Arrays are useful in situations where a fixed number of elements is desired. An example array of the names of the days of the week can be created like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;let days = [&amp;quot;Monday&amp;quot;, &amp;quot;Tuesday&amp;quot;, &amp;quot;Wednesday&amp;quot;, &amp;quot;Thursday&amp;quot;, &amp;quot;Friday&amp;quot;, &amp;quot;Saturday&amp;quot;, &amp;quot;Sunday&amp;quot;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I haven’t discussed memory yet as it relates to Rust, but similar to tuples, arrays are held in memory on the stack. This is because they are a known, fixed length, similar to the basic data types. Rust knows how much memory to allocate for them at compile time.&lt;&#x2F;p&gt;
&lt;p&gt;Arrays are declared with square brackets and can receive an optional type declaration, like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;let numbers: [i32; 6] = [1, 2, 3, 4, 5, 6];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We’ve created an array of six integers and bound it to the variable named numbers. The type declaration is enclosed in square brackets and contains the type followed by a semicolon and the number of elements in the array.&lt;&#x2F;p&gt;
&lt;p&gt;If for some reason an array is needed that initially has all the same elements, a short form can be used to declare it, like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;let initial_values = [3; 3];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This creates an array with three elements, all having the integer value 3.&lt;&#x2F;p&gt;
&lt;p&gt;Elements within an array are accessed by referencing the variable name and appending an index surrounded with square brackets, like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;     let weekdays = [&amp;quot;Monday&amp;quot;, &amp;quot;Tuesday&amp;quot;, &amp;quot;Wednesday&amp;quot;, &amp;quot;Thursday&amp;quot;, &amp;quot;Friday&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;     let midweek = weekdays[2];
&lt;&#x2F;span&gt;&lt;span&gt;     let endofweek = weekdays[4];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we declare an array variable that contains the five days of the week. Individual elements are indexed from 0 to 4. We then assign Wednesday to a new variable called midweek and Friday to a new variable called endofweek.&lt;&#x2F;p&gt;
&lt;p&gt;It’s important to remember the 0 start index of an array. I messed up while writing this 🙂 I think whoever decided to start indexing at zero should have their head examined, but it is what it is.&lt;&#x2F;p&gt;
&lt;p&gt;To conclude the discussion on arrays, Rust will help you when accessing array elements by automatically checking that the specified index is less than the array’s length. A runtime error will be received in the event the program tries to access an array index that is beyond the end of the array.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;This article has covered Rust’s compound data types, tuples and arrays. I haven’t seen or written giant amounts of Rust code yet, but I’ve not seen these data structures used particularly often. The go-to seems to be vectors, particularly vectors of structs. The potential unwieldiness of tuples and the inability of arrays to grow or shrink I think limits their use cases. They both have the advantage of being stored on the stack in memory, so they are cheap to make and quick to access. At the end of the day, both are an available tool and you the programmer must choose what works best for your particular problem.&lt;&#x2F;p&gt;
&lt;p&gt;References&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch03-02-data-types.html&quot;&gt;The Rust Programming Language, Chapter 3.2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Pouring the Footings: Single Value Data Types</title>
        <published>2022-04-14T00:00:00+00:00</published>
        <updated>2022-04-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2022/2022-04-14-pouring-the-footings-single/"/>
        <id>https://jeff-mitchell.dev/blog/2022/2022-04-14-pouring-the-footings-single/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2022/2022-04-14-pouring-the-footings-single/">&lt;p&gt;Today I continue my writing campaign about the Rust language. If you haven’t noticed, I’m roughly following the chapter layout of The Rust Programming Language, also known as “The Rust Book”. I’ve tried repeatedly to read The Book, but have concluded reading passively is useless. It’s a book that requires active reading.&lt;&#x2F;p&gt;
&lt;p&gt;So, I will semi-blog my way through it here on my site.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve covered the following basics so far:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;creating a Hello, World&lt;&#x2F;li&gt;
&lt;li&gt;use of constants&lt;&#x2F;li&gt;
&lt;li&gt;variables, mutability, shadowing, and comments&lt;&#x2F;li&gt;
&lt;li&gt;I’ll now turn to another basic language building block, data types. Data types are at the core of getting things done in Rust.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are two broad data types available, single value and compound value. This article will focus on single value types. Compound value types are on deck as they deserve attention on their own.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;scalar-types&quot;&gt;Scalar Types&lt;&#x2F;h3&gt;
&lt;p&gt;Single value data types represent one value, be it a number, character, or boolean. They are the simplest data types to work with and can be used in lots of ways and in combination with more complex data structures. Grouping these simple data types into structures, vectors, or hashmaps are typical use cases.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Integers&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;An integer is a number without a fractional component and can be signed or unsigned. There are several different maximum lengths of integers, chosen depending on the size of the number you need to represent. Rust defaults to an i32 or 32-bit integer.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s an example of an integer variable:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;let life = 42;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We’ve created a variable named life and bound the integer value 42 to it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Floating-Point&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A floating-point number has a decimal component. Rust supports 32-bit (f32) and 64-bit (f64) floating-point numbers. The default is f64. All floating-point numbers can be signed, there is no unsigned option like with integers.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s create a floating-point variable:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;let pi = 3.14;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We’ve created a variable named pi and bound the floating-point value 3.14 to it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Numeric Operations&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Rust supports all the basic mathematical operations that one would expect in a programming language. These are addition, subtraction, multiplication, and division. There is also a remainder operation, which provides the remainder when one number is not cleanly divisible by the other.&lt;&#x2F;p&gt;
&lt;p&gt;The combined knowledge I’ve written about in my articles thus far allows us to write a tiny program to do math on integers or floating point numbers. Here’s one possiblity:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;     let x = 5;
&lt;&#x2F;span&gt;&lt;span&gt;     let y = 6;
&lt;&#x2F;span&gt;&lt;span&gt;     let sum = x + y;
&lt;&#x2F;span&gt;&lt;span&gt;     println!(&amp;quot;The sum of {} and {} is: {}&amp;quot;, x, y, sum);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let’s walk through that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;declare a main function as the starting point of the program&lt;&#x2F;li&gt;
&lt;li&gt;create a variable named x and bind the integer value 5 to it&lt;&#x2F;li&gt;
&lt;li&gt;create a variable named y and bind the integer value 6 to it&lt;&#x2F;li&gt;
&lt;li&gt;create a variable named sum and use the addition operator to add x and y together and bind the result to the sum variable&lt;&#x2F;li&gt;
&lt;li&gt;use the println! macro to print out a message with our inputs and the sum&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;em&gt;Boolean&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you need a true or false value, a boolean is the data type of choice. Booleans are used a lot when controlling flow in a program. Here’s an example:&lt;&#x2F;p&gt;
&lt;p&gt;let liar_liar = true;
We’ve created a variable name liar_liar and bound the boolean value true to it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Character&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The final simple single value is a character. Characters are bound to variable names like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;let char = &amp;#39;Z&amp;#39;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The character data type can be used to hold emojis as well as traditional characters. It’s important to remember that character values represent a single character. You may be asking yourself about strings, what about them? Well, strings are a separate and distinct data type from characters. Strings carry many different quirks and just as The Book does, I’ll be treating them separately in the future.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;The basic building blocks in Rust are pretty close to my ancient coding knowledge of a language called Pascal. As such, I’ve found them pretty easy to get acquainted with. This article has provided you with an overview of the basic, single value data types in Rust. These basic types can be composed in many different ways and are the core building blocks of any Rust program. Even advanced, higher-order stuff will have some basic math in it somewhere.&lt;&#x2F;p&gt;
&lt;p&gt;There are lots of subtleties to read about regarding the single value data types, I invite you to consult The Rust Book should you wish to learn more.&lt;&#x2F;p&gt;
&lt;p&gt;References&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch03-02-data-types.html&quot;&gt;The Rust Programming Language, Chapter 3.2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Pouring the Footings</title>
        <published>2022-04-12T00:00:00+00:00</published>
        <updated>2022-04-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2022/2022-04-12-pouring-the-footings/"/>
        <id>https://jeff-mitchell.dev/blog/2022/2022-04-12-pouring-the-footings/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2022/2022-04-12-pouring-the-footings/">&lt;p&gt;Before I continue in my series of articles on learning Rust, I’d like to remind you that I’m a random internet nobody. I’m far from an expert in this language and feel I have no right to be writing about anything to anyone most of the time. Learning to code is difficult and there are probably far better-informed experts to learn from than me. However, I have the tiny hope that sharing my journey will be beneficial to someone. There are precious few people writing about their experience with Rust. The act of writing about my learning process and the hurdles I overcome benefit me and I hope you do as well.&lt;&#x2F;p&gt;
&lt;p&gt;Enough navel-gazing, let’s get on with some more foundational concepts in Rust. These building blocks are crucial. I know, speaking for myself, I’m in a terrible race to understand the higher-order concepts, because those are what make you able to build things other than toy software. The truth is that higher-order concepts are meaningless without solid footings to rest on. I’ve already written a short piece about Getting started with a Hello World app as well as a short piece on the advantages of Constants, so now I’ll turn to comments, variables, mutability, and shadowing.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;comments&quot;&gt;Comments&lt;&#x2F;h3&gt;
&lt;p&gt;I’m going to start by asking you to take my advice because I’m not using it. I say that because I’m terrible at commenting on my code. Comments are important, don’t be like me. You should liberally comment on your code. Think of comments as bread crumbs to your future self. You could struggle for days on a particular piece of your program and if you’re diligent with commenting, you’ll have something to come back to later when faced with a similar problem. Comments are a great way to document the problem-solving process. Try to make them reflect the thinking in getting to the code, not so much what the code does.&lt;&#x2F;p&gt;
&lt;p&gt;Comments are prefaced with two slashes, like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This is a Rust comment.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Multi-line comments are done like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This is the first line...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...of a multi-line comment.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Comments can go anywhere you like, but tend to be most useful right around what they’re commenting on.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This is a great place for a comment. Let&amp;#39;s bind an integer
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; to the variable named life, we&amp;#39;ll then print out to the
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; console the value of the meaning of life.
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; life = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;     println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;What is the meaning of life? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, life);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There is a third type of comment, which powers as an aspect of the Rust that I find amazing. The third type is a documentation comment. It looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; This is a documentation comment in Rust.  These comments are picked up by Cargo&amp;#39;s automated documentation tool.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’ll write more about this down the road. If you want to read more now, head over to Publishing a Crate to Crates.io in the Rust Book.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;variables-mutability-and-shadowing&quot;&gt;Variables, Mutability, and Shadowing&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;em&gt;Assigning Variables&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Programming languages would be all but useless without variables. Variables allow the creation of programs that can accept a wide variety of input to do some action. In Rust, the act of creating a variable and giving it a value looks like this:&lt;&#x2F;p&gt;
&lt;p&gt;let album = “Attero Dominatus”;
Here we bind a string slice (more about that in another article) to a variable named album, using the let keyword.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Immutability of Variables&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you write some code that re-assigns the album variable later in your program, you’ll receive a compiler error that informs you that you can’t assign twice to the immutable variable ‘band’. A pillar of Rust is that variables are always immutable, meaning they can’t be changed after assignment. This protects you from a whole range of bugs involving variables that change when least expected. If a variable does need to change, then use the mut keyword to make it mutable.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; band = “Sabaton”;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will allow you to change the value assigned to the variable band, if needed, elsewhere in the program. Default immutability is one of Rust’s terrific safety features and helps you protect yourself by making you think carefully about how and when variables need to be modified.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Shadowing of Variables&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Rust allows one variable to be shadowed by another. Here’s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x = x + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;println!(“The value of x is: {}”, x);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let’s break it down…&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;first, bind the value 5 to the variable named x&lt;&#x2F;li&gt;
&lt;li&gt;second, shadow the value of x, take the original value (5) and add one&lt;&#x2F;li&gt;
&lt;li&gt;the value of x will be 6 and this gets printed to the console&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Shadowing variables is a useful way to transform values from one type to another as well as perform operations on them. The variable is still immutable, even after the completion of any transformations.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;In this article, I’ve hopefully given you some foundational breadcrumbs in the Rust language. Take these and go off to do your reading, research, and practice. As always, I recommend The &lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;&quot;&gt;Rust Programming Language&lt;&#x2F;a&gt; for further reading and detail.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Just Say No to Magic Values</title>
        <published>2022-04-09T00:00:00+00:00</published>
        <updated>2022-04-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2022/2022-04-09-constants/"/>
        <id>https://jeff-mitchell.dev/blog/2022/2022-04-09-constants/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2022/2022-04-09-constants/">&lt;p&gt;The journey to proficiency in Rust continues. In a &lt;a href=&quot;https:&#x2F;&#x2F;jeff-mitchell.dev&#x2F;blog&#x2F;2022&#x2F;2022-04-05-baby-steps-with-rust&#x2F;&quot;&gt;previous article&lt;&#x2F;a&gt;, I provided a brief overview of how to get started with Rust by creating a tiny cliche of a program that displays the message, “Hello, World!”.&lt;&#x2F;p&gt;
&lt;p&gt;This article will focus on a specific language aspect, namely constants.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-is-a-constant&quot;&gt;What is a Constant?&lt;&#x2F;h3&gt;
&lt;p&gt;A constant is a value that can be bound to a name, similar to a variable. By its nature, the value cannot change.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-is-the-purpose-of-a-constant&quot;&gt;What is the Purpose of a Constant?&lt;&#x2F;h3&gt;
&lt;p&gt;Constants are useful in any programming language because they help you avoid so-called “magic values”. A magic value is something that is hardcoded into the code base…likely in a million different locations, by the time all is said and done, which makes it impossible (or at least nasty) to properly update and change the code.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of hardcoded values, a handful of constants declared upfront make it clear and easy to update them later, should their values need to change.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;declaring-constants&quot;&gt;Declaring Constants&lt;&#x2F;h3&gt;
&lt;p&gt;Here’s how to declare the speed of light (in metric) as a constant in Rust:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;SPEED_OF_LIGHT&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;299792458
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;First, the const keyword is used, followed by a name. The convention is all caps. Next, the constant must receive a type annotation, I’ve used a 32-bit unsigned integer type. The last step is to bind the value to the new constant with the = operator.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;scope-of-validity&quot;&gt;Scope of Validity&lt;&#x2F;h3&gt;
&lt;p&gt;Constants can be declared in any scope, including the global scope, as such, they can be made widely available.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;other-considerations&quot;&gt;Other Considerations&lt;&#x2F;h3&gt;
&lt;p&gt;As one might expect, constants are immutable by default. Their values can’t be changed and you can’t use the mut keyword with them. A key concept in Rust is the notion that variables are immutable by default. One must expressly choose to make them mutable (changeable) by adding the keyword mut to the variable binding. Mut does not work with values that are constant.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks for reading my short but sweet thoughts on contants in Rust.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch03-01-variables-and-mutability.html&quot;&gt;Rust Programming Language: Common Programming Concepts, Constants&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Baby Steps with Rust</title>
        <published>2022-04-05T00:00:00+00:00</published>
        <updated>2022-04-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jeff-mitchell.dev/blog/2022/2022-04-05-baby-steps-with-rust/"/>
        <id>https://jeff-mitchell.dev/blog/2022/2022-04-05-baby-steps-with-rust/</id>
        
        <content type="html" xml:base="https://jeff-mitchell.dev/blog/2022/2022-04-05-baby-steps-with-rust/">&lt;h3 id=&quot;why&quot;&gt;Why?&lt;&#x2F;h3&gt;
&lt;p&gt;Late in 2020, I decided I needed to properly learn to code. The goal is to modernize myself and build things that will help myself and eventually the world around me. I’ve danced with several things but at the beginning of 2022 decided to double down on the Rust language. Rust is an immensely powerful tool which can be used to create pretty much any kind of software imaginable. It has a steep learning curve, but it’s well worth mastering. Rust is inherently safe and performant, has excellent tools, and some of the best compiler help I’ve ever experienced.&lt;&#x2F;p&gt;
&lt;p&gt;Rust is available for Windows, Linux, and macOS and generally can be used to create software for any&#x2F;all of these platforms. I say generally because you will hit the odd occasion where certain libraries (referred to as “crates” in the Rust world) are only compiled for say Linux but not Windows or macOS. I hit this last year when following a tutorial to build a vim clone, one of the supporting crates was only compiled for Linux. The project wouldn’t work on Windows.&lt;&#x2F;p&gt;
&lt;p&gt;This is a short article which will help you get off the ground should you wish to explore this language.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;assumptions&quot;&gt;Assumptions:&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;a solid foundation of general computer skills&lt;&#x2F;li&gt;
&lt;li&gt;comfort with the command line (on the platform of your choice)&lt;&#x2F;li&gt;
&lt;li&gt;experience in another compiled programming language (I don’t recommend coming to Rust cold, you should pick something else first if you have no previous experience)&lt;&#x2F;li&gt;
&lt;li&gt;you’re using Visual Studio Code as your editor&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;concepts&quot;&gt;Concepts:&lt;&#x2F;h3&gt;
&lt;p&gt;Rust is a compiled language, meaning the programs you write need to be translated (compiled) into a format that your computer can use. This is different from an interpreted language, in which you can write your programs and have the computer immediately do the work so you can see the result. If you’d like a more in-depth explanation of the difference, this article on freeCodeCamp is a great start.&lt;&#x2F;p&gt;
&lt;p&gt;Rust uses a system of packages, crates, and modules in which to organize code, The Rust Book states:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust has a number of features that allow you to manage your code’s organization, including which details are exposed, which details are private, and what names are in each scope in your programs. These features, sometimes collectively referred to as the module system&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Cargo is Rust’s package management tool. Cargo allows you to build, test, run and deploy your program. You can create Rust programs without it, but I don’t recommend that. I will use Cargo exclusively for the rest of this article as well as in everything I write&#x2F;do going forward.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;installation&quot;&gt;Installation:&lt;&#x2F;h3&gt;
&lt;p&gt;If you haven’t already, follow the official installation instructions for your computer platform to get Rust installed.&lt;&#x2F;p&gt;
&lt;p&gt;Greeting&lt;&#x2F;p&gt;
&lt;p&gt;It’s a cliche, but let’s make a program that says hello and displays your name. Create a directory in a location of your choosing and type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; new HelloName
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will create a new binary project in a directory called HelloWorld. Rust programs fall into two broad types, binaries and libraries. A binary is an independent program which can be run on its own. A library cannot be run on its own and is meant to be used as a dependency internally to your program or by other Rust programs.&lt;&#x2F;p&gt;
&lt;p&gt;Next, type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; HelloName
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will change you into the freshly created HelloName project directory. From here, fire up Visual Studio code by typing:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt; .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Visual Studio Code will launch and open the HelloWorld directory and display all its contents in the file browser. You should see a directory called src, click on it to reveal main.rs, the entry point of the bare bones Rust program that Cargo created for you. Cargo actually mocks up all the code we need without anything additional. The code should look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jeff&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;     println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, name);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This extremely simple starting point highlights some key components of a Rust program:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the main() function serves as the entry point to your program&lt;&#x2F;li&gt;
&lt;li&gt;we bind the string &amp;quot;Jeff&amp;quot; to a variable called &amp;quot;name&amp;quot; (you should change this to be your own name!)&lt;&#x2F;li&gt;
&lt;li&gt;the println! macro takes the string &amp;quot;Hello, {}!&amp;quot; as an argument, inserts the value of name in place of the curly braces and prints it to the console&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The other key items to note are are that Rust expressions must terminate with a semi-colon and expressions and statements within a function are surrounded by curly braces. The curly braces are especially important in the discussion of ownership, a core memory management feature offered by Rust&lt;&#x2F;p&gt;
&lt;p&gt;To run our very basic program, back at the command line, type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You should see the message “Hello, (your name)” outputted to the terminal. Congratulations! No matter how simple, you’ve just programmed in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;That’s it for this very bare bones introduction. The language has a lot of power and there are many concepts to learn and master. More to come in the future!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;resources&quot;&gt;Resources:&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;&quot;&gt;The Rust Programming Language&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;index.html&quot;&gt;The Cargo Book&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
